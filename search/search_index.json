{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Formation PyQGIS","text":""},{"location":"#pre-requis","title":"Pr\u00e9-requis","text":"<p>Cette formation concerne des utilisateurs de QGIS, g\u00e9omaticiens, qui souhaitent apprendre l'API Python de QGIS :</p> <ul> <li>Ajout de fonctionnalit\u00e9s \u00e0 QGIS</li> <li>Automatisation de certains traitements</li> <li>Cr\u00e9ation de script</li> <li>Cr\u00e9ation d'algorithme Processing</li> </ul> <p>Pour suivre la formation, il faut :</p> <ul> <li>Avoir QGIS LTR minimum</li> <li>Avoir des connaissances en QGIS bureautique</li> <li>Avoir quelques bases en programmation</li> <li>Avoir un jeu de donn\u00e9es, par exemple :<ul> <li>BD Topo du d\u00e9partement </li> </ul> </li> </ul> <p>Si n\u00e9cessaire, il peut \u00eatre utile d'avoir en plus :</p> <ul> <li>qgis_process</li> <li>QtDesigner pour la partie sur les formulaires ou une extension graphique</li> </ul>"},{"location":"#plan","title":"Plan","text":"<ul> <li>Pr\u00e9sentation<ul> <li>Python dans QGIS</li> <li>M\u00e9mo Python, sans PyQGIS</li> </ul> </li> <li>Premier pas avec l'API PyQGIS<ul> <li>Console</li> <li>Fonctions &amp; Scripts</li> <li>S\u00e9lection &amp; Parcours</li> </ul> </li> <li>Utilisation simple<ul> <li>Action</li> <li>Formulaire</li> <li>Expression </li> </ul> </li> <li>Utilisation avanc\u00e9e<ul> <li>Script Processing</li> <li>Extension g\u00e9n\u00e9rique</li> <li>Extension graphique</li> <li>Extension Processing</li> <li>Application standalone</li> </ul> </li> <li>Sujet PyGIS th\u00e9matique<ul> <li>Interroger une base PostGIS</li> </ul> </li> <li>Outils annexes<ul> <li>D\u00e9ploiement d'une extension</li> <li>IDE Python &amp; Git</li> <li>Migration majeure au sein d'un code Python</li> </ul> </li> </ul>"},{"location":"action/","title":"Les actions","text":"<ul> <li>Pour conna\u00eetre le principe des actions dans QGIS, il faut se r\u00e9f\u00e9rer au manuel de QGIS :<ul> <li>https://docs.qgis.org/latest/fr/docs/user_manual/working_with_vector/vector_properties.html#actions-properties</li> </ul> </li> <li>On souhaite pouvoir faire notre propre action pour inverser le sens d'une ligne, par exemple une rivi\u00e8re.</li> <li>Pour la couche lin\u00e9aire :</li> <li>Nous allons utiliser le script ci-dessous pour cr\u00e9er une couche tr\u00e8s simple, mais qui permet de voir la construction     d'une ligne en partant de z\u00e9ro</li> <li>Sinon, pour aller beaucoup plus vite, ajouter la couche <code>HYDROGRAPHIE/COURS_D_EAU.shp</code>     mais on ne voit pas comment construire la g\u00e9om\u00e9trie en partant de rien.</li> <li>Faire un style rapide pour mettre en \u00e9vidence le sens de la ligne \u00e0 l'aide d'une <code>Ligne de symbole</code> dans   l'onglet <code>Symbologie</code> de la couche en question.</li> </ul> <p>Info</p> <p>La couche <code>HYDROGRAPHIE/COURS_D_EAU.shp</code> est de type multilinestring. Nous allons donc prendre en compte ce cas par d\u00e9faut dans la suite de ce tutoriel.</p> <pre><code># Notation pour ajouter des attributs en cr\u00e9ant une couche m\u00e9moire\n# https://docs.qgis.org/latest/fr/docs/pyqgis_developer_cookbook/vector.html#from-an-instance-of-qgsvectorlayer\nriver = QgsVectorLayer('MultiLineString?crs=epsg:2154&amp;field=id:integer&amp;field=name:string(20)&amp;index=yes', 'Rivers', 'memory')\n\nQgsProject.instance().addMapLayer(river)\n\nwith edit(river):\n    # Cette fonction permet de faire des v\u00e9rifications sur les contraintes si n\u00e9cessaires contrairement \u00e0 QgsFeature(fields)\n    feature = QgsVectorLayerUtils.createFeature(river)\n    feature.setAttribute('id', 0)\n    feature.setAttribute('name', 'Une rivi\u00e8re')\n    geom = QgsGeometry.fromMultiPolylineXY(\n    [\n        [QgsPointXY(1, 1), QgsPointXY(2, 2), QgsPointXY(3, 2), QgsPointXY(4, 1)]\n    ])\n    feature.setGeometry(geom)\n    river.addFeature(feature)\n\nextent = river.extent()\ncanvas = iface.mapCanvas()\ncanvas.setExtent(extent)\ncanvas.refresh()\n</code></pre>"},{"location":"action/#les-actions-par-defaut","title":"Les actions par d\u00e9faut","text":"<ul> <li>Dans la fen\u00eatre des propri\u00e9t\u00e9s d'une couche vecteur, aller dans l'onglet <code>Actions</code>.</li> <li>Cliquer sur le bouton <code>Cr\u00e9er les actions par d\u00e9faut</code>.</li> <li>Observons quelques actions pour comprendre le fonctionnement ainsi que les scopes/champs d'application   des actions.</li> </ul> <p>Info</p> <p>Selon le champ d'application de l'action, il y a plus ou moins de variables. Il faut regarder les infobulles.</p>"},{"location":"action/#notre-propre-action","title":"Notre propre action","text":"<ul> <li>Commen\u00e7ons un nouveau par un script Python classique, laissons de c\u00f4t\u00e9 le concept des actions pour le moment.</li> <li>\u00c9crire une fonction qui se charge d'inverser une ligne. Cette fonction prend en param\u00e8tre la couche   vecteur et une liste d'ID des entit\u00e9s.</li> <li>Il faut penser \u00e0 v\u00e9rifier le type exact de g\u00e9om\u00e9trie de nos lignes, dans les propri\u00e9t\u00e9s de la couche.</li> </ul> <pre><code>def reverse_geom(layer: QgsVectorLayer, ids: int):\n    \"\"\" Inverser le sens des diff\u00e9rentes entit\u00e9s dans la couche layer.\n\n    ids est l'identifiant d'une entit\u00e9 qu'il faut inverser.\n    \"\"\"\n    pass\n</code></pre> <p>Le mot-cl\u00e9 <code>pass</code> est juste une instruction Python qui ne fait strictement rien, mais qui permet de rendre une ligne de code valide en respectant l'indentation. Vous pouvez la supprimer d\u00e8s qu'il y a du code.</p> <p>Il faut :</p> <ul> <li>R\u00e9cup\u00e9rer la g\u00e9om\u00e9trie, tenir compte qu'il s'agit d'une multi-ligne</li> <li>Appliquer la fonction <code>reverse</code> en Python pour inverser une liste</li> <li>Utiliser une session d'\u00e9dition</li> <li>Utiliser <code>QgsVectorLayer.changeGeometry()</code> pour changer la g\u00e9om\u00e9trie d'un objet existant !</li> </ul> <p>On peut appeler notre nouvelle fonction \u00e0 l'aide du code suivant :</p> <pre><code>layer = iface.activeLayer()\n# Une action ne s'effectuant que sur une seule entit\u00e9, on peut utiliser [0]\nids = layer.selectedFeatureIds()[0]\n\nreverse_geom(layer, ids)\n</code></pre> Afficher la solution <pre><code>def reverse_geom(layer, ids):\n    \"\"\" Inverser le sens d'une entit\u00e9 dans la couche layer.\n\n    ids est une liste comportant les IDs des entit\u00e9s \u00e0 inverser.\n    \"\"\"\n    feature = layer.getFeature(ids)\n    geom = feature.geometry()\n    lines = geom.asMultiPolyline()\n    for line in lines:\n        line.reverse()\n    new_geom = QgsGeometry.fromMultiPolylineXY(lines)\n    with edit(layer):\n        layer.changeGeometry(feature.id(), new_geom)\n\nlayer = iface.activeLayer()\nids = layer.selectedFeatureIds()[0]\n\nreverse_geom(layer, ids)\n</code></pre> <p>Incorporons ce code dans une action et adaptons-le l\u00e9g\u00e8rement :</p> <p></p> <pre><code>def reverse_geom(layer, ids):\n    \"\"\" Inverser le sens d'une entit\u00e9 dans la couche layer.\n\n    ids est une liste comportant les IDs des entit\u00e9s \u00e0 inverser.\n    \"\"\"\n    feature = layer.getFeature(ids)\n    geom = feature.geometry()\n    lines = geom.asMultiPolyline()\n    for line in lines:\n        line.reverse()\n    new_geom = QgsGeometry.fromMultiPolylineXY(lines)\n    with edit(layer):\n        layer.changeGeometry(feature.id(), new_geom)\n\nlayer = QgsProject.instance().mapLayer('[% @layer_id %]')\nreverse_geom(layer, [% @id %])\n</code></pre> <p>On peut d\u00e9sormais cliquer sur une ligne pour automatiquement inverser une ligne.</p> <p>Le code de l'action est enregistr\u00e9 dans le style QML de la couche vecteur. Il peut donc \u00eatre partag\u00e9 avec  d'autres utilisateurs qui ne connaissent pas Python.</p>"},{"location":"action/#informer-lutilisateur","title":"Informer l'utilisateur","text":"<p>Si on souhaite informer l'utilisateur que cela s'est bien pass\u00e9, on peut utiliser la \"message bar\" :</p> <pre><code>from qgis.utils import iface\n\niface.messageBar().pushMessage('Inversion', 'La rivi\u00e8re est invers\u00e9e', Qgis.Success)\n</code></pre> <p>Note, contrairement \u00e0 la console o\u00f9 QGIS importait pour nous directement la variable <code>iface</code>, dans ce contexte, il faut le faire manuellement.</p>"},{"location":"action/#astuce-pour-stocker-le-code-dune-action-dans-une-extension-qgis","title":"Astuce pour stocker le code d'une action dans une extension QGIS","text":"<p>Tip</p> <p>Pour suivre cette partie, il faut la plupart du temps une extension par exemple, voir l'autre chapitre, afin de stocker le code Python.</p> <p>Pour \u00e9viter d'avoir du code les propri\u00e9t\u00e9s de la couche QGIS, on peut r\u00e9duire le code Python au minimum en faisant dans le c\u0153ur de l'action uniquement l'import d'une fonction et de lancer son ex\u00e9cution.</p> <p>Exemple du code d'une action dans l'extension QuickOSM lors de l'ex\u00e9cution d'une requ\u00eate rapide :</p> <pre><code>from QuickOSM.core.actions import Actions\nActions.run(\"josm\",\"[% \"full_id\" %]\")\n</code></pre> <p>Ou alors l'extension RAEPA :</p> <pre><code>from qgis.utils import plugins\nplugins['raepa'].run_action(\"nom_de_laction\", params)\n</code></pre>"},{"location":"action/#avec-processing","title":"Avec Processing","text":"<p>Dans le chapitre Processing, nous verrons comment int\u00e9grer un algorithme Processing dans une action.</p>"},{"location":"console/","title":"Introduction \u00e0 la console Python","text":""},{"location":"console/#configurer-le-projet","title":"Configurer le projet","text":"<ul> <li>Commencer un nouveau projet et enregistrer le.</li> <li>\u00c0 c\u00f4t\u00e9 du projet, ajouter le dossier provenant de la BDTopo, par exemple <code>BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD</code>.</li> </ul>"},{"location":"console/#manipulation-dans-la-console","title":"Manipulation dans la console","text":""},{"location":"console/#rappel-sur-la-poo","title":"Rappel sur la POO","text":"<p>La Programmation Orient\u00e9e Objet, POO :</p> <ul> <li>la POO permet de mieux mod\u00e9liser la r\u00e9alit\u00e9 en concevant des mod\u00e8les d'objets, les classes</li> <li>les objets sont cr\u00e9\u00e9s ind\u00e9pendamment les uns des autres, gr\u00e2ce \u00e0 l'encapsulation, m\u00e9canisme qui permet d'embarquer leurs propri\u00e9t\u00e9s</li> <li>les classes permettent d'\u00e9viter au maximum l'emploi des variables globales</li> </ul> <p>Imaginons le cas d'une voiture.</p> <p>Une voiture est un objet, on peut en cr\u00e9er une instance. Sur cette instance, on a des \"propri\u00e9t\u00e9s\" comme :</p> <ul> <li>la couleur de la voiture</li> <li>le nombre de chevaux</li> <li>le nombre de portes</li> <li>la marque</li> <li>le propri\u00e9taire (qui peut-\u00eatre un autre objet \"Personne\")</li> </ul> <p>Sur cette instance, on a des \"m\u00e9thodes\" :</p> <ul> <li>avancer</li> <li>reculer</li> <li>tourner \u00e0 gauche</li> <li>verrouiller les portes</li> <li>activer les clignotants</li> </ul> classDiagram class Voiture{     +Color Couleur     +Int NbPuissance     +Int NbPortes     +String Marque     +Personne Proprietaire     +avancer() bool     +reculer(amount) int     +tourner(direction) bool } <p>On peut continuer en \u00e9crivant une classe qui va contenir une Personne :</p> classDiagram class Personne{     +String Nom     +String Prenom     +Date DateNaissance     +Date DatePermisB }"},{"location":"console/#pratique","title":"Pratique","text":"<ul> <li>Dans QGIS, <code>Plugins</code> -&gt; <code>Console Python</code></li> <li> <p>QGIS nous donne acc\u00e8s au projet actuel via la classe <code>QgsProject</code></p> <ul> <li>https://qgis.org/api/classQgsProject.html</li> <li>https://qgis.org/pyqgis/3.34/core/QgsProject.html</li> </ul> </li> <li> <p>Dans la documentation (en C++ surtout), on remarque plusieurs sections :</p> <ul> <li>Public types</li> <li>Public slots</li> <li>Signals</li> <li>Public Member Functions</li> <li>Static Public Member Functions</li> </ul> </li> <li>Nous verrons progressivement ces diff\u00e9rentes sections.</li> <li>En haut de la documentation, il y a une explication sur le cas particulier de <code>QgsProject.instance()</code>.</li> <li>Recherchons <code>filename</code>. <pre><code>project = QgsProject.instance()\nproject.fileName()\n</code></pre></li> <li>Ajoutons un titre \u00e0 notre projet. Dans l'interface graphique, cela se passe dans les propri\u00e9t\u00e9s de notre projet.   Il y a donc des chances que cela soit aussi dans la classe QgsProject</li> <li>Recherchons donc <code>title</code> dans la page : <code>setTitle</code> dans la classe   QgsProject.</li> </ul> <p>Warning</p> <p>Il est important de bien pouvoir lire la signature des m\u00e9thodes. La m\u00e9thode <code>title</code> retourne une QString et ne prend pas de param\u00e8tre. La m\u00e9thode <code>setTitle</code> retourne rien, (void) mais elle prend un param\u00e8tre, une QString.</p> <ul> <li>Nous souhaitons d\u00e9sormais changer la couleur de fond du projet.<ul> <li>Recherchons <code>background</code></li> <li>Nous allons devoir utiliser aussi la classe QColor</li> </ul> </li> </ul> Afficher la solution <pre><code>color = QColor(\"#00A2FF\")\nQgsProject.instance().setBackgroundColor(color)\n</code></pre> <ul> <li>Objectif, ajouter une couche vecteur contenu dans un dossier fils :<ul> <li>Recherchons dans l'API le dossier racine du projet. Indice, en informatique, on appelle souvent cela le <code>home</code>.</li> <li>Nous allons utiliser le module <code>os.path</code> pour manipuler les dossiers.</li> <li>https://docs.python.org/3/library/os.path.html</li> <li><code>join</code>, <code>isfile</code>, <code>isdir</code></li> </ul> </li> </ul> <pre><code>from os.path import join, isfile, isdir\nracine = QgsProject.instance().homePath()\njoin(racine, 'nexiste_pas')\n'/home/etienne/Documents/3liz/formation/nexiste_pas'\nisfile(join(racine,'nexiste_pas'))\nFalse\nisdir(join(racine,'nexiste_pas'))\nFalse\nchemin = join(racine, 'BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD', 'ADMINISTRATIF')\nfichier_shape = join(chemin, 'COMMUNE.shp')\nisfile(fichier_shape)\nTrue\n</code></pre> <ul> <li>Charger la couche vecteur \u00e0 l'aide de <code>iface</code> QgisInterface   (et non pas QgsInterface !)</li> </ul> <pre><code>communes = iface.addVectorLayer(fichier_shape, 'communes', 'ogr')\nprint(communes)\n</code></pre> <ul> <li>Charger la couche autrement (conseill\u00e9) <pre><code>communes = QgsVectorLayer(fichier_shape, 'communes', 'ogr')\ncommunes.isValid()\nQgsProject.instance().addMapLayer(communes)\n</code></pre></li> </ul> Afficher la solution compl\u00e8te avec <code>pathlib</code> <pre><code>from pathlib import Path\nproject = QgsProject.instance()\nracine = Path(project.homePath())\nchemin = racine.joinpath('BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD', 'ADMINISTRATIF')\nfichier_shape = chemin.joinpath('COMMUNE.shp')\n# fichier_shape.is_file()\ncommunes = QgsVectorLayer(str(fichier_shape), 'communes', 'ogr')\n# communes.isValid()\nQgsProject.instance().addMapLayer(communes)\n</code></pre> Afficher la solution compl\u00e8te avec <code>os.path</code> <pre><code>from os.path import join, isfile, isdir\n\nproject = QgsProject.instance()\n\nracine = project.homePath()\nchemin = join(racine, 'BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD', 'ADMINISTRATIF')\nfichier_shape = join(chemin, 'COMMUNE.shp')\ncommunes = QgsVectorLayer(fichier_shape, 'communes', 'ogr')\ncommunes.isValid()\nQgsProject.instance().addMapLayer(communes)\n</code></pre> <ul> <li>Explorer l'objet <code>communes</code> qui est un <code>QgsVectorLayer</code> \u00e0 l'aide de la documentation pour chercher sa   g\u00e9om\u00e9trie, le nombre d'entit\u00e9s.   API QgsVectorLayer C++, API QgsVectorLayer Python</li> <li>Pour la g\u00e9om\u00e9trie, toujours utiliser l'\u00e9num\u00e9ration et non pas le chiffre</li> </ul> <pre><code>communes.geometryType() == QgsWkbTypes.PolygonGeometry\ncommunes.geometryType() == QgsWkbTypes.PointGeometry\n</code></pre> <ul> <li>Essayer d'ouvrir et de clore une session d'\u00e9dition</li> <li>Essayer d\u00e9sormais de chercher son nom, la projection ou encore les seuils de visibilit\u00e9 de la couche. On ne les trouve pas dans la page <code>QgsVectorLayer</code> ! Pour cela, il faut faire r\u00e9f\u00e9rence \u00e0 la notion d'h\u00e9ritage en Programmation Orient\u00e9e Objet.</li> </ul> classDiagram class QgsMapLayer{     +name() str     +crs() QgsCoordinateReferenceSystem     +autreFonctions() }  class QgsVectorLayer{     +startEditing() bool     +commitChanges() bool     +autreFonctionsPourUneCoucheVecteur() }  class QgsRasterLayer{     +int largeur     +int hauteur     +autreFonctionsPourUneCoucheRaster() }  QgsMapLayer &lt;-- QgsVectorLayer QgsMapLayer &lt;-- QgsRasterLayer <p>L'objet <code>QgsVectorLayer</code> h\u00e9rite de <code>QgsMapLayer</code> qui est une classe commune avec <code>QgsMapLayer</code>.</p> <p>API QgsMapLayer C++, API QgsMapLayer Python</p> <p>Regardons la fonction <code>isinstance</code> qui permet de tester si un objet est une instance d'une classe :</p> <pre><code>isinstance(communes, QgsVectorLayer)\nTrue\nisinstance(communes, QgsRasterLayer)\nFalse\nisinstance(communes, QgsMapLayer)\nTrue\n</code></pre> <ul> <li>Objectif, ne pas afficher la couche commune pour une \u00e9chelle plus petite que le <code>1:2 000 000</code>.</li> </ul>"},{"location":"console/#code","title":"Code","text":"<p>Petit r\u00e9capitulatif \u00e0 tester pour voir si cela fonctionne correctement !</p> <pre><code>from os.path import join\ndossier = 'BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD'\nthematique = 'ADMINISTRATIF'\ncouche = 'COMMUNE'\n\nracine = QgsProject.instance().homePath()\nfichier_shape = join(racine, dossier, thematique, '{}.shp'.format(couche))\nlayer = QgsVectorLayer(fichier_shape, couche, 'ogr')\nresult = QgsProject.instance().addMapLayer(layer)\n\nprint(layer.featureCount())\nprint(layer.crs().authid())\nprint('Est en m\u00e8tre : {}'.format(layer.crs().mapUnits() ==  QgsUnitTypes.DistanceMeters))\nprint(layer.name())\nlayer.setScaleBasedVisibility(True)\nlayer.setMaximumScale(1)\nlayer.setMinimumScale(2000000)\nlayer.triggerRepaint()\n</code></pre> <ul> <li>Ajouter \u00e9galement la couche <code>ARRONDISSEMENT</code> et s\u00e9lectionner l\u00e0.</li> </ul>"},{"location":"console/#parcourir-les-entites","title":"Parcourir les entit\u00e9s","text":"<p>Un raccourci a savoir, dans la console : <pre><code>iface.activeLayer()\n</code></pre> Cela retourne la couche <code>QgsMapLayer</code> active dans la l\u00e9gende !</p> <p>On souhaite d\u00e9sormais it\u00e9rer sur les polygones et les faire clignoter depuis la console. Nous allons donc avoir besoin de la m\u00e9thode <code>getFeatures()</code> qui fait partie de <code>QgsVectorLayer</code>.</p> <pre><code>layer = iface.activeLayer()\nfeatures = layer.getFeatures()\nfeatures\nfeature = QgsFeature()\nfeatures.nextFeature(feature)\niface.mapCanvas().flashFeatureIds(layer, [feature.id()])\n</code></pre> <p>Note, nous pouvons concat\u00e9ner les deux derni\u00e8res lignes \u00e0 l'aide du caract\u00e8re <code>;</code> pour que cela soit plus pratique.</p> <p>Ce code est plus pour la partie \"amusante\" pour montrer les limites de la console. Nous allons d\u00e9sormais utiliser un script Python dans le prochain chapitre.</p> <p>Petite chose suppl\u00e9mentaire avant de passer aux scripts, on souhaite d\u00e9sormais afficher le nom des arrondissements \u00e0 l'aide d'une boucle <code>for</code>.</p> <pre><code>layer = iface.activeLayer()\nfor feature in layer.getFeatures():\n    # On peut traiter l'entit\u00e9 courante gr\u00e2ce \u00e0 la variable \"feature\".\n    # Pour acc\u00e9der \u00e0 un attribut en particulier, on peut y acc\u00e9der avec des crochets.\n    pass\n</code></pre> <p>Noter l'apparition de <code>...</code> au lieu de <code>&gt;&gt;&gt;</code> apr\u00e8s avoir \u00e9crit la premi\u00e8re ligne du <code>for</code>. Il faut faire une indentation obligatoire !</p> <p>Pour afficher un attribut, on peut faire <code>print(feature['NOM_ARR'])</code> pour afficher le contenu de l'attribut <code>NOM_ARR</code>.</p>"},{"location":"documentation/","title":"Documentation et liens utiles","text":"<ul> <li>QGIS est compos\u00e9 de plusieurs centaines de classes \u00e9crites en C++. La plupart de ces classes (et donc des fonctions) sont accessibles \u00e0 travers un API en Python. Comme il n'est pas possible de m\u00e9moriser enti\u00e8rement l'API de QGIS, il est n\u00e9cessaire de conna\u00eetre la documentation et comment rechercher des informations.</li> <li>QGIS 3 repose sur la librairie Qt version 5 pour l'interface graphique et sur Python version 3.</li> <li>Toutes les classes QGIS commencent par <code>Qgs</code> et toutes les classes Qt commencent par <code>Q</code>.</li> </ul> <p>Tip</p> <p>QGIS est en train de migrer vers la librairie Qt version 6. QGIS 3.42 va certainement avoir un support pour Qt6 et pouvoir faire des premiers tests PyQGIS. Lire le chapitre sur les migrations majeures de PyQGIS.</p> <p>Voici une liste de liens pour la documentation, tous en anglais, sauf le cookbook :</p> <ul> <li>https://docs.qgis.org qui regroupe :<ul> <li>Le Python Cookbook https://docs.qgis.org/latest/fr/docs/pyqgis_developer_cookbook (recette de cuisine)</li> <li>L'API C++ https://qgis.org/api/3.34/</li> <li>L'API Python https://qgis.org/pyqgis/3.34/</li> </ul> </li> <li>Documentation de l'API Qt</li> <li>Documentation de Python<ul> <li>Le module Pathlib, \"nouveau\" module pour manipuler des chemins</li> <li>Le module os.path, module \"historique\" pour manipuler des chemins</li> </ul> </li> </ul> <p>Voici une liste non exhaustive de blog-post utiles pour manipuler PyQGIS, tous en anglais :</p> <ul> <li>Cours PyQGIS de SpatialThoughts</li> <li>Optimisation des couches vecteurs</li> <li>Parcourir la l\u00e9gende en 3 parties</li> <li>Plugin Processing</li> <li>Workshop sur les expressions en Python</li> </ul> <p>Autre lien pour l'apprentissage de Python (sans QGIS) en fran\u00e7ais :</p> <ul> <li>https://openclassrooms.com/fr/courses/235344-apprenez-a-programmer-en-python</li> </ul> <p>Tip</p> <p>QGIS 3.42 va int\u00e9grer un outil pour avoir l'aide d'une classe directement depuis une variable. Voir la d\u00e9mo de QGIS 3.42.</p>"},{"location":"expression/","title":"Expression","text":"<p>On peut d\u00e9finir sa propre expression QGIS \u00e0 l'aide de Python. Il existe un chapitre dans le  Python cookbook</p> <p>Dans la fen\u00eatre des expressions QGIS, on peut observer la fonction d\u00e9j\u00e0 existante.</p> <p><code>feature</code>, <code>parent</code> et <code>context</code> sont des param\u00e8tres particuliers dans la signature de la fonction. Si QGIS trouve le mot-cl\u00e9, il assigne l'objet correspondant :</p> <ul> <li><code>feature</code> : QgsFeature pour l'entit\u00e9 en cours</li> <li><code>parent</code> : QgsExpression l'expression QGIS en cours</li> <li><code>context</code> : QgsExpressionContext pour le contexte d'ex\u00e9cution   de l'expression</li> </ul>"},{"location":"expression/#exemple","title":"Exemple","text":"<p>On souhaite utiliser l'API de Wikip\u00e9dia afin de r\u00e9cup\u00e9rer la description d'un terme.</p> <p></p> <p>Par exemple, si on cherche le terme <code>Montpellier</code> avec l'API Wikip\u00e9dia :</p> <p>https://fr.wikipedia.org/w/api.php?action=query&amp;titles=Montpellier&amp;prop=description&amp;format=json</p> <p>Il existe plusieurs moyens de faire des requ\u00eates HTTP en Python et/ou PyQGIS. Utilisons la technique Processing avec l'algorithme \"T\u00e9l\u00e9chargeur de fichier\" (graphiquement, il n'est disponible que dans le modeleur) :</p> <pre><code>search = \"montpellier\"\nresults = processing.run(\n    \"native:filedownloader\",\n    {\n        \"URL\": f\"https://fr.wikipedia.org/w/api.php?action=query&amp;titles={search}&amp;prop=description&amp;format=json\",\n        \"OUTPUT\": \"TEMPORARY_OUTPUT\"\n    }\n)\n</code></pre> <p>Tip</p> <p>On peut afficher le panneau de d\u00e9bogage et d\u00e9veloppement de QGIS afin de voir les requ\u00eates HTTP. Il se trouve dans le menu Vue \u25b6 Panneau  \u25b6 D\u00e9bogage et d\u00e9veloppement</p> <p>On va d\u00e9sormais parser le fichier JSON que l'on obtient avec la libraire <code>json</code> afin de r\u00e9cup\u00e9rer la <code>description</code> :</p> <pre><code>import json\n\nwith open(\"/mon/fichier.json\") as f:\n    data = json.load(f)\n\npages = data['query']['pages']\nkey = list(pages.keys())[0]\ndescription = pages[key]['description']\nprint(description)\n</code></pre> Solution compl\u00e8te pour l'expression QGIS <pre><code>import json\nimport processing\n\n@qgsfunction(args='auto', group='Formation PyQGIS')\ndef wiki_description(search, feature, parent):\n    \"\"\"Permet de r\u00e9cup\u00e9rer la description Wikipedia\n\n    wiki_description('Paris') \u27a1 'capitale de la France'\n    \"\"\"\n    results = processing.run(\n        \"native:filedownloader\",\n        {\n            \"URL\": f\"https://fr.wikipedia.org/w/api.php?action=query&amp;titles={search}&amp;prop=description&amp;format=json\",\n            \"OUTPUT\": \"TEMPORARY_OUTPUT\"\n        }\n    )\n\n    with open(results['OUTPUT']) as f:\n        data = json.load(f)\n\n    pages = data['query']['pages']\n    key = list(pages.keys())[0]\n    description = pages[key]['description']\n    return description\n</code></pre>"},{"location":"extension-deploiement/","title":"Comment d\u00e9ployer son extension","text":"<p>Comme vu dans le chapitre concernant la cr\u00e9ation d'une extension g\u00e9n\u00e9rique, une extension QGIS est un dossier comportant : </p> <ul> <li>un dossier qui est <code>nom_du_module</code>:<ul> <li><code>metadata.txt</code></li> <li><code>__init__.py</code> avec <code>classFactory</code></li> <li>d'autres fichiers Python</li> <li>des fichiers QtDesigner UI, SVG, couches etc</li> </ul> </li> </ul> <p>Ce dossier doit \u00eatre zipp\u00e9.</p> <p>Pour du d\u00e9ploiement, nous recommandons l'usage de QGIS-Plugin-CI qui peut faire du packaging, la g\u00e9n\u00e9ration du <code>plugins.xml</code>, envoyer sur plugins.qgis.org etc.</p>"},{"location":"extension-deploiement/#en-interne","title":"En interne","text":"<p>Si on souhaite publier en interne, on peut d\u00e9poser son dossier zip sur un serveur et on recommande l'utilisation du fichier <code>plugins.xml</code> qui permet de renseigner \u00e0 QGIS la disponibilit\u00e9 d'une extension.</p> <p>Exemple avec l'installation de PgMetadata et son fichier plugins.xml</p> <p>Il est possible de prot\u00e9ger son d\u00e9p\u00f4t avec un login/mot de passe.</p>"},{"location":"extension-deploiement/#pluginsqgisorg","title":"plugins.qgis.org","text":"<p>Plus simple pour le d\u00e9ploiement car le d\u00e9p\u00f4t plugins.qgis.org est par d\u00e9faut dans les installations de QGIS. Il faut cependant que le code source soit disponible sur internet.</p> <p>Lire les recommandations pour la publication sur ce d\u00e9p\u00f4t :</p> <ul> <li>Code source disponible</li> <li><code>metadata.txt</code> avec les bonnes informations et des liens HTTP valides</li> </ul>"},{"location":"extension-deploiement/#tutoriel-pour-installer-un-depot","title":"Tutoriel pour installer un d\u00e9p\u00f4t","text":"<p>Notre tutoriel pour l'installation d'un d\u00e9p\u00f4t, avec ou sans mot de passe.</p>"},{"location":"extension-generique/","title":"La base pour cr\u00e9er une extension","text":""},{"location":"extension-generique/#modele-de-base","title":"Mod\u00e8le de base","text":"<p>Pour cr\u00e9er une extension dans QGIS, il existe deux fa\u00e7ons de d\u00e9marrer : </p> <ul> <li>Utilisation de l'extension \"Plugin Builder\" :<ul> <li>Disponible depuis le gestionnaire des extensions de QGIS</li> <li>Assistant de cr\u00e9ation</li> <li>Tr\u00e8s (trop) complet, il y a squelette pour :<ul> <li>Du code avec des actions, ...</li> <li>G\u00e9n\u00e9rer de la documentation Sphinx</li> <li>Des tests unitaires</li> <li>Les traductions (multilingue)</li> </ul> </li> <li>Tr\u00e8s historique, moins mis \u00e0 jour ces derni\u00e8res ann\u00e9es</li> </ul> </li> <li>QGIS Minimal plugin : https://github.com/wonder-sk/qgis-minimal-plugin<ul> <li>ZIP \u00e0 t\u00e9l\u00e9charger et \u00e0 extraire</li> <li>Tr\u00e8s l\u00e9ger</li> <li>Besoin de tout refaire depuis z\u00e9ro</li> </ul> </li> </ul> <p>Nous pouvons suivre une des deux m\u00e9thodes, mais dans le cadre de la formation, faisons la m\u00e9thode minimale. Dans les deux cas, le r\u00e9sultat doit \u00eatre dans le dossier <code>python/plugins</code> du profil courant.</p> <p>Tip</p> <p>Pour trouver le profil courant, dans QGIS, <code>Pr\u00e9f\u00e9rences</code> -&gt; <code>Profils Utilisateurs</code> -&gt; <code>Ouvrir le dossier du profil actif</code>.</p> <p>Tip</p> <p>Pour installer le Minimal Plugin, vous pouvez utiliser le gestionnaire des extensions pour installer depuis un zip.</p>"},{"location":"extension-generique/#extensions-utiles","title":"Extensions utiles","text":""},{"location":"extension-generique/#plugin-reloader","title":"Plugin reloader","text":"<p>Indispensable</p> <p>Le \"Plugin Reloader\" est une extension indispensable pour d\u00e9velopper une extension pour recharger son  extension. Elle est disponible dans le gestionnaire des extensions.</p>"},{"location":"extension-generique/#pyqgis-resource-browser","title":"PyQGIS Resource Browser","text":"<p>Utile pour l'ergonomie</p> <p>Permet d'aller chercher des ic\u00f4nes d\u00e9j\u00e0 existantes dans la libraire QGIS et Qt</p>"},{"location":"extension-generique/#first-aid","title":"First aid","text":"<p>Utile pour aller plus loin</p> <p>Extension pour d\u00e9bugger en cas d'une erreur Python</p>"},{"location":"extension-generique/#apprendre-dune-autre-extension","title":"Apprendre d'une autre extension","text":"<p>Comme les extensions sur qgis.org sont disponibles sur internet, on peut regarder le code source pour comprendre.</p> <p>Pensez \u00e0 ouvrir le dossier de votre profil QGIS en suivant l'astuce ci-dessus puis dans <code>python/plugins</code>.</p>"},{"location":"extension-graphique/","title":"Cr\u00e9er une extension QGIS avec une interface graphique","text":"<p>Pour faire ce chapitre, il faut d'abord avoir une extension de base, \u00e0 l'aide du chapitre pr\u00e9c\u00e9dent.</p>"},{"location":"extension-graphique/#qtdesigner","title":"QtDesigner","text":"<p>Cr\u00e9ons un fichier QtDesigner comme-ceci : </p> <p></p> <p>et y ajouter des \"widgets\" :</p> <p></p>"},{"location":"extension-graphique/#astuces","title":"Astuces","text":"<ul> <li> <p>Ouvrir la page des \"slots/signaux\" depuis la barre d'outils et supprimer ceux qui existent.</p> </li> <li> <p>Faire un clic droit sur \"QDialog\" \u00e0 droite et faire une mise en page \"vertical\".</p> </li> </ul> <p>Tip</p> <p>Ne pas changer la propri\u00e9t\u00e9 <code>objectName</code> pour le moment.</p> <p>On peut t\u00e9l\u00e9charger la solution si besoin.</p> <ul> <li>Enregistrer le fichier en <code>dialog.ui</code></li> </ul>"},{"location":"extension-graphique/#la-classe-qui-accompagne","title":"La classe qui accompagne","text":"<p>Cr\u00e9ons un fichier <code>dialog.py</code> avec le contenu suivant :</p> <pre><code>from qgis.core import Qgis\nfrom qgis.utils import iface\nfrom qgis.PyQt.QtWidgets import QDialog, QDialogButtonBox\nfrom qgis.PyQt import uic\nfrom pathlib import Path\n\nfolder = Path(__file__).resolve().parent\nui_file = folder / 'dialog.ui'\nui_class, _ = uic.loadUiType(ui_file)\n\n\nclass MonDialog(ui_class, QDialog):\n\n    def __init__(self):\n        super().__init__()  # Appel du constructeur parent\n        self.setupUi(self)  # Fichier de QtDesigner\n</code></pre> <p>Modifions la m\u00e9thode <code>run</code> du fichier <code>__init__.py</code> en</p> <pre><code>    def run(self):\n        from .dialog import MonDialog\n        dialog = MonDialog()\n        dialog.exec()\n</code></pre> <p>Relan\u00e7ons l'extension \u00e0 l'aide du \"plugin reloader\" et cliquons sur le bouton.</p>"},{"location":"extension-graphique/#les-signaux-et-les-slots","title":"Les signaux et les slots","text":"<p>Connectons le signal <code>clicked</code> du bouton \"Annuler\" dans le constructeur <code>__init__</code> : </p> <pre><code>self.buttonBox.button(QDialogButtonBox.Cancel).clicked.connect(self.close)\n</code></pre> <p>On dit que <code>clicked</code> est un signal, auquel on connecte le slot <code>close</code>. </p> <p>Connectons-le signal <code>clicked</code> du bouton \"Accepter\" \u00e0 notre propre slot (qui est une fonction) :</p> <pre><code>self.buttonBox.button(QDialogButtonBox.Ok).clicked.connect(self.click_ok)\n</code></pre> <p>et ajoutons notre propre fonction <code>click_ok</code> pour quitter la fen\u00eatre et en affichant la saisie de l'utilisateur dans la QgsMessageBar de QGIS.</p> <p>Le widget de saisie est un QLineEdit : documentation</p> <pre><code>def click_ok(self):\n    message = self.lineEdit.text()\n    iface.messageBar().pushMessage('Notre plugin', message, Qgis.Success)\n</code></pre> <p>Faire le test dans QGIS avec une saisie de l'utilisateur et fermer la fen\u00eatre.</p> <p>Continuons en rendant en lecture seule le gros bloc de texte et affichons \u00e0 l'int\u00e9rieur la description de la couche qui est s\u00e9lectionn\u00e9e dans le menu d\u00e9roulant.</p> <p>Documentation :</p> <ul> <li>QPlainTextEdit</li> <li>QgsMapLayerComboBox</li> </ul> <p>Dans la fonction <code>__init__</code> du fichier <code>dialog.py</code> :</p> <pre><code>self.plainTextEdit.setReadOnly(True)\nself.mMapLayerComboBox.layerChanged.connect(self.layer_changed)\n</code></pre> <p>Et la nouvelle fonction qui va se charger de mettre \u00e0 jour le texte :</p> <pre><code>def layer_changed(self):\n    self.plainTextEdit.clear()\n    layer = self.mMapLayerComboBox.currentLayer()\n    if layer:\n        self.plainTextEdit.appendPlainText(f\"{layer.name()} : {layer.crs().authid()}\")\n    else:\n        self.plainTextEdit.appendPlainText(\"Pas de couche\")\n</code></pre> <p>On peut donc d\u00e9sormais cumuler l'ensemble des chapitres pr\u00e9c\u00e9dents pour lancer des algorithmes, manipuler les donn\u00e9es, etc.</p> <p>Bonus</p> <p>Ajouter un nouveau bouton pour ouvrir une fen\u00eatre d'un dialogue Processing \ud83d\ude80</p>"},{"location":"extension-graphique/#solution","title":"Solution","text":"Afficher <pre><code>from qgis.core import Qgis\nfrom qgis.utils import iface\nfrom qgis.PyQt.QtWidgets import QDialog, QDialogButtonBox\nfrom qgis.PyQt import uic\nfrom pathlib import Path\n\nfolder = Path(__file__).resolve().parent\nui_file = folder / 'dialog.ui'\nui_class, _ = uic.loadUiType(ui_file)\n\n\nclass MonDialog(ui_class, QDialog):\n\n    def __init__(self, parent=None):\n        _ = parent\n        super().__init__()\n        self.setupUi(self)  # Fichier de QtDesigner\n\n        # Connectons les signaux\n        self.buttonBox.button(QDialogButtonBox.Ok).clicked.connect(self.click_ok)\n        self.buttonBox.button(QDialogButtonBox.Cancel).clicked.connect(self.close)\n\n        self.plainTextEdit.setReadOnly(True)\n        self.mMapLayerComboBox.layerChanged.connect(self.layer_changed)\n\n    def click_ok(self):\n        self.close()\n        message = self.lineEdit.text()\n        iface.messageBar().pushMessage('Notre plugin', message, Qgis.Success)\n\n    def layer_changed(self):\n        self.plainTextEdit.clear()\n        layer = self.mMapLayerComboBox.currentLayer()\n        if layer:\n            self.plainTextEdit.appendPlainText(f\"{layer.name()} : {layer.crs().authid()}\")\n        else:\n            self.plainTextEdit.appendPlainText(\"Pas de couche\")\n</code></pre>"},{"location":"extension-graphique/#organisation-du-code","title":"Organisation du code","text":"<p>Il ne faut pas h\u00e9siter \u00e0 cr\u00e9er des fichiers afin de s\u00e9parer le code.</p> <p>On peut aussi cr\u00e9er des dossiers afin d'y mettre plusieurs fichiers Pythons. Un dossier en Python se nomme un module. Pour faire un module compatible, il faut ajouter un fichier <code>__init__.py</code> m\u00eame s\u2019il n'y a rien dedans.</p> <p>Warning</p> <p>Il ne faut vraiment pas oublier le fichier <code>__init__.py</code>. Cela peut emp\u00eacher Python de fonctionner correctement. Un bon IDE peut signaler ce genre d'erreur.</p> <p>Dans l'exemple ci-dessus, on peut diviser le code du fichier <code>__init__.py</code> :</p> <pre><code>def classFactory(iface):\n    from minimal.plugin import MinimalPlugin\n    return MinimalPlugin(iface)\n</code></pre> <p>En faisant un couper/coller, enlever la classe <code>MinimalPlugin</code> du fichier <code>__init__.py</code>.</p> <p>Tip</p> <p>On essaie souvent d'avoir une classe par fichier en Python.</p> <p>Cr\u00e9er un fichier <code>plugin.py</code> et ajouter le contenu en collant. Il est bien de v\u00e9rifier les imports dans les deux fichiers.</p>"},{"location":"extension-graphique/#un-dossier-resources","title":"Un dossier resources","text":"<p>On peut cr\u00e9er un fichier <code>qgis_plugin_tools.py</code> \u00e0 la racine de notre extension afin d'y ajouter des outils :</p> <pre><code>\"\"\"Tools to work with resources files.\"\"\"\n\nfrom pathlib import Path\n\n\ndef plugin_path(*args) -&gt; Path:\n    \"\"\"Return the path to the plugin root folder.\"\"\"\n    path = Path(__file__).resolve().parent\n    for item in args:\n        path = path.joinpath(item)\n\n    return path\n\n\ndef resources_path(*args) -&gt; Path:\n    \"\"\"Return the path to the plugin resources folder.\"\"\"\n    return plugin_path(\"resources\", *args)\n\n# On peut ajouter ici une m\u00e9thode qui charge un fichier UI qui se trouve dans le dossier \"UI\"\n# et retourne la classe directement\n</code></pre> <p>On peut ensuite cr\u00e9er un dossier <code>resources</code> puis <code>icons</code> afin d'y d\u00e9placer un fichier PNG, JPG, SVG.</p> <p>Warning</p> <p>Attention \u00e0 la taille de vos fichiers pour une petite ic\u00f4ne</p> <p>Dans une extension graphique pour les ic\u00f4nes :</p> <pre><code># En haut du fichier\nfrom qgis.PyQt.QtGui import QIcon\nfrom .qgis_plugin_tools import resources_path\n\n# Quand n\u00e9cessaire, \u00e0 remplacer la QAction existante. Il s'agit du premier param\u00e8tre avec QIcon\nself.action = QAction(\n    QIcon(str(resources_path('icons', 'icon.svg'))),\n    'Go!',\n    self.iface.mainWindow())\n</code></pre> <p>Dans une extension Processing, dans le provider et les algorithmes :</p> <pre><code># En haut du fichier\nfrom ..qgis_plugin_tools import resources_path\n\n# Dans la classe\ndef icon(self):\n    return QIcon(str(resources_path(\"icons\", \"icon.png\")))\n</code></pre>"},{"location":"extension-processing/","title":"Cr\u00e9er une extension QGIS pour Processing","text":"<p>Pour faire ce chapitre, il faut : </p> <ul> <li>avoir une extension de base, \u00e0 l'aide du chapitre pr\u00e9c\u00e9dent</li> <li>faire la mise \u00e0 jour en extension Processing \u00e0 l'aide de la    documentation QGIS</li> </ul>"},{"location":"fonctions-scripts/","title":"Organisation du code dans un script avec des fonctions","text":""},{"location":"fonctions-scripts/#communication-avec-lutilisateur-des-erreurs-et-des-logs","title":"Communication avec l'utilisateur des erreurs et des logs","text":"<p>Avant de commencer \u00e0 vraiment \u00e9crire un script avec des fonctions, regardons comment communiquer des  informations \u00e0 l'utilisateur.</p> <p>On peut envoyer des messages vers l'utilisateur avec l'utilisation de la <code>messageBar</code> de la classe QgisInterface :</p> <pre><code>iface.messageBar().pushMessage('Erreur','On peut afficher une erreur', Qgis.Critical)\niface.messageBar().pushMessage('Avertissement','ou un avertissement', Qgis.Warning)\niface.messageBar().pushMessage('Information','ou une information', Qgis.Info)\niface.messageBar().pushMessage('Succ\u00e8s','ou un succ\u00e8s', Qgis.Success)\n</code></pre> <p>Cette fonction prend 3 param\u00e8tres :</p> <ul> <li>un titre</li> <li>un message</li> <li>un niveau d'alerte</li> </ul> <p>On peut aussi \u00e9crire des logs comme ceci (plus discret, mais plus verbeux) : <pre><code>QgsMessageLog.logMessage('Une erreur est survenue','Notre outil', Qgis.Critical)\nQgsMessageLog.logMessage('Un avertissement','Notre outil', Qgis.Warning)\nQgsMessageLog.logMessage('Une information','Notre outil', Qgis.Info)\nQgsMessageLog.logMessage('Un succ\u00e8s','Notre outil', Qgis.Success)\n</code></pre></p> <p>Cette fonction prend 3 param\u00e8tres :</p> <ul> <li>un message</li> <li>une cat\u00e9gorie, souvent le nom de l'extension ou de l'outil en question</li> <li>un niveau d'alerte</li> </ul>"},{"location":"fonctions-scripts/#charger-automatiquement-plusieurs-couches-a-laide-dun-script","title":"Charger automatiquement plusieurs couches \u00e0 l'aide d'un script","text":"<p>La console, c'est bien, mais c'est tr\u00e8s limitant. Passons \u00e0 l'\u00e9criture d'un script qui va nous faciliter  l'organisation du code.</p> <p>Ci-dessous, voici le dernier script du chapitre pr\u00e9c\u00e9dent, mais avec la gestion des erreurs ci-dessus :</p> <ul> <li>Red\u00e9marrer QGIS</li> <li>N'ouvrez pas le projet pr\u00e9c\u00e9dent</li> <li>Ouvrer la console, puis cliquer sur <code>Afficher l'\u00e9diteur</code></li> <li>Copier/coller le script ci-dessous</li> <li>Ex\u00e9cuter le</li> </ul> <pre><code>from os.path import join, isfile, isdir\ndossier = 'BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD'\nthematique = 'ADMINISTRATIF'\ncouche = 'COMMUNE'\n\nracine = QgsProject.instance().homePath()\nif not racine:\n    iface.messageBar().pushMessage('Erreur de chargement','Le projet n\\'est pas enregistr\u00e9', Qgis.Critical)\nelse:\n    fichier_shape = join(racine, dossier, thematique, '{}.shp'.format(couche))\n    if not isfile(fichier_shape):\n        iface.messageBar().pushMessage('Erreur de chargement','Le chemin n\\'existe pas: \"{}\"'.format(fichier_shape), Qgis.Critical)\n    else:\n        layer = QgsVectorLayer(fichier_shape, couche, 'ogr')\n        if not layer.isValid():\n            iface.messageBar().pushMessage('Erreur de chargement','La couche n\\'est pas valide', Qgis.Critical)\n        else:\n            QgsProject.instance().addMapLayer(layer)\n            iface.messageBar().pushMessage('Bravo','Well done!', Qgis.Success)\n</code></pre> <ul> <li>\u00c0 l'aide du m\u00e9mo Python :</li> <li>Essayons de faire une fonction qui prend 2 param\u00e8tres<ul> <li>la th\u00e9matique (le dossier)</li> <li>le nom du shapefile</li> </ul> </li> <li>La fonction se chargera de faire le n\u00e9cessaire, par exemple: <code>charger_couche('ADMINISTRATIF', 'COMMUNE')</code></li> <li>La fonction peut \u00e9galement retourner <code>False</code> si la couche n'est pas charg\u00e9e (une erreur) ou sinon l'objet couche.</li> </ul> <pre><code>def charger_couche(thematique, couche):\n    pass\n</code></pre> <p>Tip</p> <p>Le mot-cl\u00e9 <code>pass</code> ne sert \u00e0 rien. C'est un mot-cl\u00e9 Python pour rendre un bloc valide mais ne faisant rien. On peut le supprimer le bloc n'est pas vide.</p> Afficher la solution interm\u00e9diaire <pre><code>from os.path import join, isfile, isdir\ndossier = 'BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD'\n\n\ndef charger_couche(thematique, couche):\n    \"\"\"Fonction qui charge une couche shapefile dans une th\u00e9matique.\"\"\"\n    racine = QgsProject.instance().homePath()\n    if not racine:\n        iface.messageBar().pushMessage('Erreur de chargement','Le projet n\\'est pas enregistr\u00e9', Qgis.Critical)\n    else:\n        fichier_shape = join(racine, dossier, thematique, '{}.shp'.format(couche))\n        if not isfile(fichier_shape):\n            iface.messageBar().pushMessage('Erreur de chargement','Le chemin n\\'existe pas: \"{}\"'.format(fichier_shape), Qgis.Critical)\n        else:\n            layer = QgsVectorLayer(fichier_shape, couche, 'ogr')\n            if not layer.isValid():\n                iface.messageBar().pushMessage('Erreur de chargement','La couche n\\'est pas valide', Qgis.Critical)\n            else:\n                QgsProject.instance().addMapLayer(layer)\n                iface.messageBar().pushMessage('Bravo','Well done!', Qgis.Success)\n\nthematique = 'ADMINISTRATIF'\ncouche = 'COMMUNE'\ncharger_couche(thematique, couche)\n</code></pre> <p>Am\u00e9liorons encore cette solution interm\u00e9diaire avec la gestion des erreurs et aussi en gardant le code le plus \u00e0 gauche possible gr\u00e2ce \u00e0 l'instruction <code>return</code> qui ordonne la sortie de la fonction.</p> Afficher une des solutions finales <pre><code>from os.path import join, isfile, isdir\n\ndef charger_couche(thematique, couche):\n    \"\"\"Fonction qui charge une couche shapefile dans une th\u00e9matique.\"\"\"\n    dossier = 'BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD'\n\n    racine = QgsProject.instance().homePath()\n    if not racine:\n        iface.messageBar().pushMessage('Erreur de chargement','Le projet n\\'est pas enregistr\u00e9', Qgis.Critical)\n        return False\n\n    fichier_shape = join(racine, dossier, thematique, '{}.shp'.format(couche))\n    if not isfile(fichier_shape):\n        iface.messageBar().pushMessage('Erreur de chargement','Le chemin n\\'existe pas: \"{}\"'.format(fichier_shape), Qgis.Critical)\n        return False\n\n    layer = QgsVectorLayer(fichier_shape, shapefile, 'ogr')\n    if not layer.isValid():\n        iface.messageBar().pushMessage('Erreur de chargement','La couche n\\'est pas valide', Qgis.Critical)\n        return False\n\n    QgsProject.instance().addMapLayer(layer)\n    iface.messageBar().pushMessage('Bravo','Well done!', Qgis.Success)\n    return layer\n\ncharger_couche('ADMINISTRATIF', 'COMMUNE')\ncharger_couche('ADMINISTRATIF', 'ARRONDISSEMENT')\n</code></pre> <ul> <li>Essayons de faire une fonction qui liste les shapefiles d'une certaine th\u00e9matique.</li> </ul> <p>On peut utiliser la m\u00e9thode os.walk(path) permet de parcourir un chemin et de lister les r\u00e9pertoires et les fichiers.</p> <p>Ou alors on peut utiliser une autre m\u00e9thode, un peu plus \u00e0 la mode en utilisant le mode pathlib qui comporte \u00e9galement les fonctions <code>isfile</code>, <code>isdir</code> etc.</p> <p>En utilisant le module <code>os.walk</code>, un peu historique :</p> <pre><code>import os\n\ndef liste_shapefiles(thematique):\n    \"\"\"Liste les shapefiles d'une th\u00e9matique.\"\"\"\n    dossier = 'BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD'\n    racine = QgsProject.instance().homePath()\n    shapes = []\n    for root, directories, files in os.walk(os.path.join(racine, dossier, thematique)):\n        for file in files:\n            if file.lower().endswith('.shp'):\n                shapes.append(file.replace('.shp', ''))\n    return shapes\n\nshapes = liste_shapefiles('ADMINISTRATIF')\nprint(shapes)\n</code></pre> <p>En utilisant le \"nouveau\" module <code>pathlib</code>:</p> <pre><code>from pathlib import Path\n\ndef liste_shapefiles(thematique):\n    \"\"\"Liste les shapefiles d'une th\u00e9matique.\"\"\"\n    racine = QgsProject.instance().homePath()\n    dossier = Path(racine).joinpath('BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD', thematique)\n    shapes = []\n    for file in dossier.iterdir():\n        if file.suffix.lower() == '.shp':\n            shapes.append(file.stem)\n    return shapes\n\nshapes = liste_shapefiles('ADMINISTRATIF')\nprint(shapes)\n</code></pre> <p>Tip</p> <p>Il faut se r\u00e9f\u00e9rer \u00e0 la documentation du module pathlib pour comprendre le fonctionnement de cette classe.</p> <ul> <li>Permettre le chargement automatique de toute une th\u00e9matique.</li> </ul> Afficher la solution compl\u00e8te <pre><code>import os\nfrom os.path import join, isfile, isdir\ndossier = 'BDT_3-3_SHP_LAMB93_D0ZZ-EDYYYY-MM-DD'\n# couche = 'COMMUNE'\n\ndef liste_shapesfiles(thematique):\n    \"\"\"Liste les shapes d'une th\u00e9matique\"\"\"\n    racine = QgsProject.instance().homePath()\n    if not racine:\n        iface.messageBar().pushMessage('Erreur de chargement','Le projet n\\'est pas enregistr\u00e9', Qgis.Critical)\n        return False\n\n    shapes = []\n    for root, directories, files in os.walk(os.path.join(racine, dossier, thematique)):\n        # print(files)\n        for file in files:\n            # print(file)\n            if file.lower().endswith('.shp'):\n                # print(file)\n                shapes.append(file.replace(\".shp\", \"\"))\n\n    return shapes\n\ndef charger_couche(thematique, couche):\n\n    \"\"\"Fonction qui charge des couches suivant une th\u00e9matique.\"\"\"\n    racine = QgsProject.instance().homePath()\n    if not racine:\n        iface.messageBar().pushMessage('Erreur de chargement','Le projet n\\'est pas enregistr\u00e9', Qgis.Critical)\n        return False\n\n    fichier_shape = join(racine, dossier, thematique, '{}.shp'.format(couche))\n    if not isfile(fichier_shape):\n        iface.messageBar().pushMessage('Erreur de chargement','Le chemin n\\'existe pas: \"{}\"'.format(fichier_shape), Qgis.Critical)\n        return False\n\n    layer = QgsVectorLayer(fichier_shape, couche, 'ogr')\n    if not layer.isValid():\n        iface.messageBar().pushMessage('Erreur de chargement','La couche n\\'est pas valide', Qgis.Critical)\n        return False\n\n    QgsProject.instance().addMapLayer(layer)\n    iface.messageBar().pushMessage('Bravo','Well done!', Qgis.Success)\n    return layer\n\n\nthematique = 'ADMINISTRATIF'\nshapes = liste_shapesfiles(thematique)\nfor shape in shapes:\n    charger_couche(thematique, shape)\n</code></pre>"},{"location":"fonctions-scripts/#extraction-des-informations-sous-forme-dun-fichier-csv","title":"Extraction des informations sous forme d'un fichier CSV.","text":"<p>On souhaite d\u00e9sormais r\u00e9aliser une fonction d'export des m\u00e9tadonn\u00e9es de nos couches au format CSV, avec son CSVT. Il existe d\u00e9j\u00e0 un module CSV dans Python pour nous aider \u00e0 \u00e9crire un fichier de type CSV, mais nous n'allons pas l'utiliser. Nous allons plut\u00f4t utiliser l'API QGIS pour cr\u00e9er une nouvelle couche en m\u00e9moire comportant les diff\u00e9rentes informations que l'on souhaite exporter. Puis nous allons utiliser l'API pour exporter cette couche m\u00e9moire au format CSV (l'\u00e9quivalent dans QGIS de l'action <code>Exporter la couche</code>).</p> <p>Les diff\u00e9rents champs qui devront \u00eatre export\u00e9s sont :</p> <ul> <li>son nom</li> <li>son type de g\u00e9om\u00e9trie (format humain, lisible)</li> <li>la projection</li> <li>le nombre d'entit\u00e9</li> <li>l'encodage</li> <li>si le seuil de visibilit\u00e9 est activ\u00e9</li> <li>la source (le chemin) de la donn\u00e9e</li> </ul>"},{"location":"fonctions-scripts/#exemple-de-sortie","title":"Exemple de sortie","text":"nom type projection nombre_entite encodage source seuil_de_visibilite couche_1 Line EPSG:4326 5 UTF-8 /tmp/...geojson False couche_2 Tab No geometry 0 /tmp/...shp True"},{"location":"fonctions-scripts/#petit-memo","title":"Petit m\u00e9mo","text":"<p>Pour cr\u00e9er une couche tabulaire en m\u00e9moire, code qui vient du cookbook : <pre><code>layer_info = QgsVectorLayer('None', 'info', 'memory')\n</code></pre></p> <p>La liste des couches : <pre><code>layers = QgsProject.instance().mapLayers()\n</code></pre></p> <p>Pour utiliser une session d'\u00e9dition, on peut faire : <pre><code>layer.startEditing()  # D\u00e9but de la session\nlayer.commitChanges()  # Fin de la session en enregistrant\nlayer.rollback()  # Fin de la session en annulant les modifications\n</code></pre></p> <p>On peut \u00e9galement faire une session d'\u00e9dition avec un \"contexte Python\" :</p> <pre><code>from qgis.core import edit\n\nwith edit(layer):\n    # Faire une \u00e9dition sur la couche\n    pass\n\n# \u00c0 la fin du bloc d'indentation, la session d'\u00e9dition est automatiquement close, m\u00eame en cas d'erreur Python\n</code></pre> Exemple de l'utilisation d'un contexte Python avec la session d'\u00e9dition <p>Sans contexte, la couche reste en mode \u00e9dition en cas d'erreur fatale Python</p> <pre><code>layer = iface.activeLayer()\n\nlayer.startEditing()\n\n# Code inutile, mais qui va volontairement faire une erreur Python\na = 10 / 0\n\nlayer.commitChanges()\n</code></pre> <p>Mais utilisons d\u00e9sormais un contexte Python \u00e0 l'aide de<code>with</code>, sur une couche qui n'est pas en \u00e9dition :</p> <pre><code>layer = iface.activeLayer()\n\nwith edit(layer):\n    # Code inutile, mais qui va volontairement faire une erreur Python\n    a = 10 / 0\n</code></pre> <p>On peut lire le code comme <code>En \u00e9ditant la couche \"layer\", faire :</code>.</p> <p>Nous allons avoir besoin de plusieurs classes dans l'API QGIS : </p> <ul> <li>Enregistrer un fichier : la classe QgsVectorFileWriter</li> <li>Un champ : QgsField,   attention \u00e0 ne pas confondre avec QgsFields   qui lui repr\u00e9sente un ensemble de champs.</li> <li>Une entit\u00e9 : QgsFeature</li> </ul> <p>Pour le type de champ, on va avoir besoin de l'API Qt \u00e9galement :</p> <ul> <li>https://doc.qt.io/qt-5/qmetatype.html#Type-enum</li> <li>Remplacer <code>QMetaType</code> par <code>QVariant</code> et aussi exception <code>QString</code> par <code>String</code></li> <li>Par exemple, pour cr\u00e9er un nouveau champ de type entier : <code>QgsField('nombre_entit\u00e9', QVariant.Int)</code></li> </ul> <p>Il va y avoir plusieurs \u00e9tapes dans ce script :</p> <ol> <li>R\u00e9cup\u00e9rer la liste des couches pr\u00e9sentes dans la l\u00e9gende</li> <li>Cr\u00e9er une couche en m\u00e9moire</li> <li>Ajouter des champs \u00e0 cette couche en utilisant une session d'\u00e9dition</li> <li>It\u00e9rer sur les couches pour ajouter ligne par ligne les m\u00e9tadonn\u00e9es dans une session d'\u00e9dition</li> <li>Enregistrer en CSV la couche m\u00e9moire</li> </ol> <p>Tip</p> <p>Pour d\u00e9boguer, on peut afficher la couche m\u00e9moire en question avec <code>QgsProject.instance().addMapLayer()</code></p>"},{"location":"fonctions-scripts/#solution","title":"Solution","text":"<pre><code>from os.path import join\n\nlayers = QgsProject.instance().mapLayers()\nif not layers:\n    iface.messageBar().pushMessage('Pas de couche','Attention, il n\\'a pas de couche', Qgis.Warning)\n\nlayers = [layer for layer in layers.values()]\n\nlayer_info = QgsVectorLayer('None', 'info', 'memory')\n\nfields = []\nfields.append(QgsField('nom', QVariant.String))\nfields.append(QgsField('type', QVariant.String))\nfields.append(QgsField('projection', QVariant.String))\nfields.append(QgsField('nombre_entite', QVariant.Int))\nfields.append(QgsField('encodage', QVariant.String))\nfields.append(QgsField('source', QVariant.String))\nfields.append(QgsField('seuil_de_visibilite', QVariant.String))\n\nwith edit(layer_info):\n    for field in fields:\n        layer_info.addAttribute(field)\n\nQgsProject.instance().addMapLayer(layer_info)\n\nwith edit(layer_info):\n    for layer in layers:\n        feature = QgsFeature(layer_info.fields())\n        feature.setAttribute(\"nom\", layer.name())\n        feature.setAttribute(\"projection\", layer.crs().authid())\n        feature.setAttribute(\"nombre_entite\", layer.featureCount())\n        feature.setAttribute(\"encodage\", layer.dataProvider().encoding())\n        feature.setAttribute(\"source\", layer.source())\n        feature.setAttribute(\"type\", QgsWkbTypes.geometryDisplayString(layer.geometryType()))\n        feature.setAttribute(\"seuil_visibilite\", layer.hasScaleBasedVisibility())\n        layer_info.addFeature(feature)\n\nbase_name = QgsProject.instance().baseName()\nQgsVectorFileWriter.writeAsVectorFormat(\n    layer_info,\n    join(QgsProject.instance().homePath(), f'{base_name}.csv'),\n    'utf-8',\n    QgsCoordinateReferenceSystem(),\n    'CSV',\n    layerOptions=['CREATE_CSVT=YES']\n)\n\n# Afficher une messageBar pour confirmer que c'est OK, en vert ;-)\n</code></pre> Pour la version avec <code>writeAsVectorFormatV3</code> <p>Il faut d\u00e9sormais donner le contexte pour une \u00e9ventuelle reprojection que l'on trouve dans la classe QgsProject : <code>QgsProject.instance().transformContext()</code>.</p> <p>L'ensemble des options se donne via une nouvelle variable <code>QgsVectorFileWriter.SaveVectorOptions()</code>.</p> <pre><code>options = QgsVectorFileWriter.SaveVectorOptions()\noptions.driverName = 'CSV'\noptions.fileEncoding = 'UTF-8'\noptions.layerOptions = ['CREATE_CSVT=YES', 'SEPARATOR=TAB']\n\nbase_name = QgsProject.instance().baseName()\nQgsVectorFileWriter.writeAsVectorFormatV3(\n    layer_info,\n    join(QgsProject.instance().homePath(), f'{base_name}.csv'),\n    QgsProject.instance().transformContext(),\n    options,\n)\n</code></pre> <p>Warning</p> <p>Ajouter une couche raster et retester le script ... surprise \ud83c\udf81</p> <p>Tip</p> <p>Pour obtenir en Python la liste des fournisseurs GDAL/OGR : <pre><code>from osgeo import ogr\n[ogr.GetDriver(i).GetDescription() for i in range(ogr.GetDriverCount())]    \n</code></pre> ou dans le menu Pr\u00e9f\u00e9rences \u27a1 Options \u27a1 GDAL \u27a1 Pilotes vecteurs</p>"},{"location":"fonctions-scripts/#finalisation","title":"Finalisation","text":"<p>Id\u00e9alement, il faut v\u00e9rifier le r\u00e9sultat de l'enregistrement du fichier. Les diff\u00e9rentes m\u00e9thodes <code>writeAsVectorFormat</code> retournent syst\u00e9matiquement un tuple avec un code d'erreur et un message si n\u00e9cessaire, voir la documentation.</p> <p>En cas de succ\u00e8s, il est pratique d'avertir l'utilisateur. On peut aussi fournir un lien pour ouvrir l'explorateur de fichier :</p> <pre><code>base_name = QgsProject.instance().baseName()\noutput_file = Path(QgsProject.instance().homePath()).joinpath(f'{base_name}.csv')\niface.messageBar().pushSuccess(\n    \"Export OK des couches \ud83d\udc4d\",\n    (\n        \"Le fichier CSV a \u00e9t\u00e9 enregistr\u00e9 dans \"\n        \"&lt;a href=\\\"{}\\\"&gt;{}&lt;/a&gt;\"\n    ).format(output_file.parent, output_file)\n)\n</code></pre>"},{"location":"fonctions-scripts/#connection-dun-signal-a-une-fonction","title":"Connection d'un signal \u00e0 une fonction","text":"<p>Nous avons pu voir que dans la documentation des librairies Qt et QGIS, il y a une section Signals.</p> <p>Cela sert \u00e0 d\u00e9clencher du code Python lorsqu'un signal est \u00e9mis.</p> <p>Par exemple, dans la classe <code>QgsMapLayer</code>, cherchons un signal qui est \u00e9mis apr\u00e8s (before) que la session d'\u00e9dition commence.</p> <pre><code>variable_de_lobjet.nom_du_signal.connect(nom_de_la_fonction)\n</code></pre> <p>Note, il ne faut pas \u00e9crire <code>nom_de_la_fonction()</code> car on ne souhaite pas appeler la fonction, juste connecter.</p>"},{"location":"formulaire/","title":"Formulaire","text":"<p>Warning</p> <p>Pensez \u00e0 autoriser les macros dans les  Propri\u00e9t\u00e9s de QGIS \u27a1 G\u00e9n\u00e9ral \u27a1 Fichiers du projet \u27a1 Activer les macros</p> <p></p> <p>On peut personnaliser un formulaire avec :</p> <ul> <li>un fichier QtDesigner, m\u00eame si on recommande l'utilisation du mode Drag&amp;Drop qui permet de cr\u00e9er des onglets   et des cat\u00e9gories.</li> <li>un fichier Python afin de modifier le comportement du formulaire, ajouter des boutons, modifier la CSS etc</li> </ul> <p>Tip</p> <p>Le blog de Nathan est une bonne ressource concernant les formulaires et QtDesigner pour cette partie la, mais cela commence \u00e0 \u00eatre vieux.</p> <p>Sur la couche Geopackage, dans les propri\u00e9t\u00e9s de la couche \u27a1 Formulaire d'attributs, cliquer sur le petit logo Python en haut bleu et jaune. Choisir l'option Fournir le code dans cette bo\u00eete de dialogue.</p> <p>Dans le nom de la fonction, mettre <code>my_form_open</code> qui correspond \u00e0 l'exemple du code en dessous.</p> <p>La fonction <code>my_form_open</code> sera donc ex\u00e9cut\u00e9 par d\u00e9faut lors de l'ouverture du formulaire. On remarque qu'il y a trois param\u00e8tres qui sont donn\u00e9s :</p> <ul> <li><code>dialog</code> \u27a1 QgsAttributeForm qui h\u00e9rite de QWidget</li> <li><code>layer</code> \u27a1 QgsVectorLayer</li> <li><code>feature</code> \u27a1 QgsFeature</li> </ul> <p>Dans l'objet <code>dialog</code> :</p> <ul> <li>essayons de rechercher les boutons en bas OK et Annuler</li> <li>ajoutons le bouton Aide pour ouvrir une page internet d'aide</li> </ul> <p>Pour information :</p> <ul> <li><code>QWidget::findChild(NOM_CLASSE)</code> retourne un objet de la NOM_CLASSE sp\u00e9cifi\u00e9 dans le widget courant. Ce n'est pas une cha\u00eene de caract\u00e8re bien une classe qu'il faut donner.</li> <li><code>QWidget::findChild(NOM_CLASSE, \"nom_objet\")</code>, idem que ci-dessus, mais permet de filtrer avec le nom de l'objet, tr\u00e8s utile sur les champs.</li> <li>La barre des boutons est une <code>QDialogButtonBox</code></li> <li>Pour ouvrir une URL : <code>QDesktopServices</code></li> </ul> Afficher <pre><code>from qgis.PyQt.QtCore import QUrl\nfrom qgis.PyQt.QtWidgets import QWidget, QDialogButtonBox\nfrom qgis.PyQt.QtGui import QDesktopServices\n\ndef my_form_open(dialog, layer, feature):\n    button_box = dialog.findChild(QDialogButtonBox)\n    button_box.setStandardButtons(QDialogButtonBox.Cancel|QDialogButtonBox.Help|QDialogButtonBox.Ok)\n\n    button_box.button(QDialogButtonBox.Help).clicked.connect(open_help)\n\ndef open_help():\n    QDesktopServices.openUrl(QUrl('https://docs.3liz.org/'))\n</code></pre> <ul> <li>Appliquons une CSS sur le champ <code>type</code> pour mettre un fond rouge :</li> </ul> <p><pre><code>type_field = dialog.findChild(QLineEdit, \"type\")\ntype_field.setStyleSheet(\"background-color: rgba(255, 107, 107, 150);\")\n</code></pre> * On souhaite rendre le champ en rouge seulement s'il y a une condition :</p> <pre><code>type_field = dialog.findChild(QLineEdit, \"type\")\ntype_field.textChanged.connect(type_field_changed)\n\ndef type_field_changed():\n    type_field = dialog.findChild(QLineEdit, \"type\")\n    if type_field.text() not in ('studio', 'appartement', 'maison'):\n        type_field.setStyleSheet(\"background-color: rgba(255, 107, 107, 150);\")\n        type_field.setToolTip(\"La valeur doit \u00eatre 'studio', 'appartement' ou 'maison'.\")\n    else:\n        type_field.setStyleSheet(\"\")\n        type_field.setToolTip()\n</code></pre> <ul> <li>Cherchons le champ <code>surface</code> et calculons la surface avec la g\u00e9om\u00e9trie.</li> </ul> <p>Info</p> <p>Notons que ce ne sont que des exemples des fonctionnalit\u00e9s Python. On peut faire ces masques de saisie \u00e0 l'aide des expressions QGIS ou simplement en changeant le type de widget pour un champ en particulier.</p>"},{"location":"ide-git/","title":"Python avanc\u00e9","text":""},{"location":"ide-git/#utilisation-dun-ide","title":"Utilisation d'un IDE","text":"<p>Pour \u00e9crire du code Python, on peut utiliser n'importe quel \u00e9diteur de texte brut quelque soit l'OS. Cependant, l'utilisation d'un \u00e9diteur de texte qui \"comprend\" le code Python est vivement recommand\u00e9, car il peut vous signaler quelques erreurs facilement d\u00e9tectables, telles que les imports manquants. Comme \u00e9diteur de texte, il en existe plusieurs.</p> <p>Si vous souhaitez faire plus de programmation, nous vous recommandons l'utilisation d'un IDE. Il embarque l'\u00e9diteur de texte ci-dessus, mais poss\u00e8de aussi des outils de debugs et d'assistance dans l'\u00e9criture du code comme l'autocompl\u00e9tion.</p> <p>En IDE gratuit, il existe : </p> <ul> <li>Visual Studio en ajoutant les extensions Python</li> <li>PyCharm Community, d\u00e9di\u00e9 au langage Python</li> </ul> <p>Un IDE est outil tr\u00e8s complet pour d\u00e9veloppement. Il est possible de coder en Python avec un \u00e9diteur de texte, mais si possible qui sait quand m\u00eame faire de la coloration syntaxique du code Python est vraiment un plus (NotePad++\u2026).</p>"},{"location":"ide-git/#lancer-un-script-python-dans-la-console","title":"Lancer un script Python dans la console","text":"<p>Si vous utilisez un IDE pour \u00e9crire du code Python, vous pouvez lancer le code Python dans la console Python \u00e0 l'aide de cette astuce.</p> <ul> <li>Ouvrir l'\u00e9diteur de script Python (pas juste la console)</li> <li>Tapez <code>print(\"bonjour\")</code> dans le panneau de droite</li> <li>Lancer le script avec la fl\u00e8che verte</li> <li>Copier/coller la ligne qui permet de lancer le script et modifier le chemin pour pointer vers le fichier sur votre disque.   Elle ressemble \u00e0 <code>exec(Path('/chemin/vers/fichier.py').read_text())</code>.</li> </ul>"},{"location":"ide-git/#utilisation-de-git","title":"Utilisation de GIT","text":"<p>Il est vivement recommand\u00e9 d'utiliser GIT :</p> <ul> <li>sauvegarde de son code sur un serveur (public ou priv\u00e9)</li> <li>versionner son code et suivre les modifications</li> <li>simplifier le travail d'\u00e9quipe</li> </ul> <p>La documentation : https://git-scm.com/docs/</p> <p>Les commandes les plus utiles :</p> <ul> <li><code>git commit</code> : https://git-scm.com/docs/git-commit/fr</li> <li><code>git add</code> : https://git-scm.com/docs/git-add/fr</li> <li><code>git push</code> : https://git-scm.com/docs/git-push/fr</li> <li><code>git pull</code> : https://git-scm.com/docs/git-pull/fr</li> </ul> <p>Liens vers OpenClassRooms :</p> <ul> <li>https://openclassrooms.com/fr/courses/1233741-gerez-vos-codes-source-avec-git</li> <li>https://openclassrooms.com/fr/courses/5641721-utilisez-git-et-github-pour-vos-projets-de-developpement</li> </ul>"},{"location":"legende/","title":"Objectif","text":"<p>\u00c0 travers ce TP, on va traiter plusieurs points : </p> <ul> <li>jointure d'une couche ODS pour r\u00e9cup\u00e9rer des populations</li> <li>appeler un algorithme Processing pour agr\u00e9ger les donn\u00e9es</li> <li>retravailler la l\u00e9gende afin d'afficher le nom de la commune et la population dans le libell\u00e9</li> </ul> <p>METTRE PHOTO l\u00e9gende</p>"},{"location":"legende/#donnees","title":"Donn\u00e9es","text":"<p>On peut placer les deux fichiers l'un \u00e0 c\u00f4t\u00e9 de l'autre. Ouvrir dans QGIS le fichier GPKG seulement.</p> <ul> <li>L'agglom\u00e9ration de Montpellier d'OpenStreetMap</li> <li>Fichier tableur avec les populations de l'INSEE</li> </ul>"},{"location":"legende/#objectif_1","title":"Objectif","text":"<pre><code>from pathlib import Path\n\nlayer = iface.activeLayer()\n\nparent_folder = Path(layer.source()).parent\n\nprint(parent_folder)\n\nfichier_ods = parent_folder / \"base_cc_comparateur.ods\"\nprint(fichier_ods.is_file())\n\ntableur = QgsVectorLayer(str(fichier_ods), \"tableur\", \"ogr\")\nprint(tableur.isValid())\n</code></pre>"},{"location":"memo-python/","title":"Introduction au language Python","text":""},{"location":"memo-python/#quest-ce-que-python","title":"Qu'est-ce que Python ?","text":"<ul> <li>Multi-usage (WEB, application graphique, script, serveur etc)</li> <li>Programmation Orient\u00e9e Objet (POO)<ul> <li>Tout est objet</li> </ul> </li> <li>Interpr\u00e9t\u00e9</li> <li>Centr\u00e9 sur la lecture et la productivit\u00e9<ul> <li>Syntaxe du code simple</li> </ul> </li> <li>Grosse communaut\u00e9<ul> <li>De nombreux packages disponibles sur internet sur PyPi.org</li> </ul> </li> </ul> <pre><code># D\u00e9claration d'une variable de type entier\nx = 5\n\n# D\u00e9claration d'une variable cha\u00eene de caract\u00e8re\ninfo = 'X est compris entre 0 et 10'\n\nif 0 &lt; x &lt; 10:\n    print(info)\n</code></pre>"},{"location":"memo-python/#versions","title":"Versions","text":"<ul> <li>Python 2<ul> <li>Sortie en 2000</li> <li>Il a \u00e9t\u00e9 tr\u00e8s utilis\u00e9, notamment sur les tutoriels sur internet et quelques projets qui tardent \u00e0  se mettre \u00e0 jour</li> <li>Une adoption massive (QGIS 2)</li> <li>Derni\u00e8re version le 1 janvier 2020</li> </ul> </li> <li>Python 3<ul> <li>Sortie en 2008, mais il s'agit d'une adoption tr\u00e8s lente, tellement Python 2 a \u00e9t\u00e9 massivement adopt\u00e9.</li> <li>Derni\u00e8re version 3.13.X du 7 octobre 2024</li> <li>1 version majeure par an, en octobre</li> <li>QGIS 3 requiert :<ul> <li>Python 3.5 minimum for QGIS 3.4</li> <li>Python 3.6 minimum for QGIS 3.18</li> <li>Python 3.7 minimum for QGIS 3.20</li> <li>Python 3.9 minimum for QGIS 3.40</li> </ul> </li> <li>Version de Python souvent sup\u00e9rieure \u00e0 la version minimum, sauf sur MacOS\u2026 \ud83d\ude11</li> </ul> </li> </ul>"},{"location":"memo-python/#rappel-de-base-sur-python","title":"Rappel de base sur Python","text":"<ul> <li>Un m\u00e9mo Python plus important sur W3Schools</li> <li>Un cours Python sur OpenClassRooms</li> </ul>"},{"location":"memo-python/#la-console","title":"La console","text":"<p>Pour la suite de la formation, nous allons utiliser la console Python de QGIS.</p> <p>Dans le menu Extensions \u27a1 Console Python.</p> <p>Tip</p> <p>Souvent, avec Windows, il y a un conflit avec un raccourci clavier pour taper le caract\u00e8re <code>{</code> ou <code>}</code> dans la console.</p> <p>Ces caract\u00e8res sont utilis\u00e9s en Python. Il est donc conseill\u00e9 de supprimer ce raccourci clavier. Il s'agit du \"zoom + secondaire\" dans QGIS \u2192 menu Pr\u00e9f\u00e9rences \u27a1 Raccourcis clavier.</p>"},{"location":"memo-python/#les-types-de-donnees","title":"Les types de donn\u00e9es","text":"<p>Une variable peut contenir un entier, un bool\u00e9en (<code>True</code> ou <code>False</code>), cha\u00eene de caract\u00e8res, nombre d\u00e9cimal, un objet... Il y a un faible typage des variables, c'est-\u00e0-dire qu'une variable peut changer de type au cours de l'ex\u00e9cution du programme.</p> <pre><code>mon_compteur = 0\ntype(mon_compteur)\n&lt;class 'int'&gt;\n\nmon_compteur = False\ntype(mon_compteur)\n&lt;class 'bool'&gt;\n\nmon_compteur = 'oui'\ntype(mon_compteur)\n&lt;class 'str'&gt;\n\nmon_compteur = \"non\"\ntype(mon_compteur)\n&lt;class 'str'&gt;\n\nmon_compteur = 3.5\ntype(mon_compteur)\n&lt;class 'float'&gt;\n\nmon_compteur = None\ntype(mon_compteur)\n&lt;class 'NoneType'&gt;\n</code></pre>"},{"location":"memo-python/#les-structures-de-donnees","title":"Les structures de donn\u00e9es","text":"<p>Il existe quatre types de structure de donn\u00e9es :</p> <ul> <li> <p>les variables simples (ci-dessus)</p> </li> <li> <p>les listes (modifiables) <pre><code>nombres = []\ntype(nombres)\n&lt;class 'list'&gt;\n\nnombres.append(1)\nnombres.extend([2, 3, 4])\nnombres\n[1, 2, 3, 4]\n\n\n# Autre exemple\nmois = ['janvier', 'f\u00e9vrier', 'mars', 'avril']\nmois[2]\nmars\n\nmois[12]\nTraceback (most recent call last):\n  File \"/usr/lib/python3.7/code.py\", line 90, in runcode\n    exec(code, self.locals)\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nIndexError: tuple index out of range\n</code></pre></p> </li> <li> <p>les tuples (non modifiables)</p> </li> </ul> <pre><code>liste_vide = ()\nliste = (1 , 2, 3, 'bonjour')\ntype(liste)\n&lt;class 'tuple'&gt;\nlen(liste)\n4\nliste[0]\n1\nliste[0:2]\n(1, 2)\nliste[2:]\n(3, 'bonjour')\nliste[5]\nTraceback (most recent call last):\n  File \"/usr/lib/python3.7/code.py\", line 90, in runcode\n    exec(code, self.locals)\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nIndexError: tuple index out of range\n</code></pre> <ul> <li>les dictionnaires</li> </ul> <p>Attention, les dictionnaires ne sont pas ordonn\u00e9s, de fa\u00e7on native, m\u00eame depuis Python 3.9. Si vraiment, il y a besoin, il existe une classe <code>OrderedDict</code>, mais ce n'est pas une structure de donn\u00e9es native dans Python. C'est un objet.</p> <pre><code>personne = {}\ntype(personne)\n# &lt;class 'dict'&gt;\npersonne['prenom'] = 'etienne'\npersonne['nom'] = 'trimaille'\npersonne['est_majeur'] = True\npersonne['age'] = 35\n</code></pre>"},{"location":"memo-python/#les-commentaires","title":"Les commentaires","text":"<p>Pour commenter le code dans un script, pas dans la console : </p> <pre><code># Ceci est un commentaire sur une ligne\n\n\"\"\" Ces lignes sont r\u00e9serv\u00e9s pour la documentation de l'API et ne doivent pas \u00eatre des lignes de commentaires. \"\"\"\n</code></pre>"},{"location":"memo-python/#arithmetique","title":"Arithm\u00e9tique","text":"<pre><code>a = 10\na += 1 # Augmenter de 1 \u00e0 la variable a\n# \u00e9quivalent \u00e0\na = a + 1\na -= 1 # Diminuer de 1\na += 5 # Incr\u00e9menter de 5\n\nb = a + 1\nc = a - 1\nd = a * 2\ne = a / 2\n\na = 10\nf = a % 3  # Fonction \"modulo\", r\u00e9sultat 1\ng = a ** 2  # Fonction puissance, r\u00e9sultat 100\n</code></pre>"},{"location":"memo-python/#concatener-des-chaines-et-des-variables","title":"Concat\u00e9ner des cha\u00eenes et des variables","text":"<p>Concat\u00e9ner, c'est assembler des cha\u00eenes de caract\u00e8res dans une seule et m\u00eame sortie. On peut concat\u00e9ner des variables entre elles ou du texte.</p> <p>Il existe plein de mani\u00e8res de faire, mais certaines sont plus pratiques que d'autres <pre><code># Non recommand\u00e9\na = 'bon'\nb = 'jour'\na + b  # 'bonjour'\nc = 1\na + c  # Erreur\na + str(c)  # Marche\n</code></pre></p> <p>\u00c0 l'ancienne avec <code>%</code> <pre><code>prenom = 'Pierre'\nnumero_jour = 2\nbienvenue = 'Bonjour %s !' % prenom\nbienvenue = 'Bonjour %s, nous sommes le %s novembre' % (prenom, numero_jour)\n</code></pre></p> <p>Nouveau avec <code>{}</code> et <code>format</code> <pre><code>prenom = 'Pierre'\nnumero_jour = 2\nbienvenue = 'Bonjour {} !'.format(prenom)\nbienvenue = 'Bonjour {}, nous sommes le {} novembre'.format(prenom, numero_jour)\nbienvenue = 'Bonjour {prenom}, nous sommes le {jour} novembre'.format(prenom=prenom, jour=numero_jour)\n</code></pre></p> <p>Encore plus moderne avec <code>fstring</code> <pre><code>prenom = 'Pierre'\nnumero_jour = 2\nbienvenue = f'Bonjour {prenom} !'\nbienvenue = f'Bonjour {prenom}, nous sommes le {numero_jour} novembre'\n</code></pre></p>"},{"location":"memo-python/#operateurs-logiques","title":"Op\u00e9rateurs logiques","text":"<pre><code>a &gt; b\na &gt;= b\na &lt; b\na &lt;= b\na == b\na != b\na is b\na is not b\na in b\n0 &lt; a &lt; 10\n</code></pre>"},{"location":"memo-python/#condition","title":"Condition","text":"<p>Important, Python oblige l'indentation sinon il y a une erreur. Par convention, il s'agit de 4 espaces. </p> <pre><code>note = 13\nif note &gt;= 16:\n    if note == 20:\n        print('Toutes mes f\u00e9licitations')\n    else:\n        print('F\u00e9licitations')\nelif 14 &lt;= note &lt; 16:\n    print('Tr\u00e8s bien')\nelif 12 &lt;= note &lt; 14:\n    print('Bien')\nelse:\n    print('Peu mieux faire')\n</code></pre>"},{"location":"memo-python/#boucle-for","title":"Boucle for","text":"<p>Utile lors que l'on connait le nombre de r\u00e9p\u00e9titions avant l'ex\u00e9cution de la boucle.</p> <pre><code>for x in range(10):\n    print(x)\n\ncountries = ['Allemagne', 'Espagne', 'France']\nfor country in countries:\n    print('Pays : {}'.format(country))\n\nregions = {\n    'Auvergne-Rh\u00f4ne-Alpes': 'Lyon',\n    'Bourgogne-Franche-Comt\u00e9': 'Dijon',\n    'Bretagne': 'Rennes',\n    'Centre-Val de Loire': 'Orl\u00e9ans',\n}\n\nfor region in regions:\n    print(region)\n\nfor region in regions.keys():\n    print(region)\n\nfor city in regions.values():\n    print(city)\n\nfor region, city in regions.items():\n    print('R\u00e9gion {} dont le chef lieu est {}'.format(region, city))\n\n# Non recommand\u00e9, mais on peut le rencontrer\nfor region in regions:\n  print(f\"R\u00e9gion {region} dont le chef lieu est {regions[region]}\")\n</code></pre>"},{"location":"memo-python/#recherche-dun-element","title":"Recherche d'un \u00e9l\u00e9ment","text":"<pre><code>countries = ['Allemagne', 'Espagne', 'France']\n\n# Solution simple\nif 'Allemagne' in countries:\n    print('Pr\u00e9sent')\nelse:\n    print('Non pr\u00e9sent')\n\n# Plus complexe, avec une fonction pour les minuscules\npresent = False\nfor country in countries:\n    if country.lower() == 'allemagne':\n        present = True\nif present:\n    print('Pr\u00e9sent')\nelse:\n    print('Non pr\u00e9sent')\n\n\n# Le plus pythonique\nfor country in countries:\n    if country.lower() == 'allemagne':\n        print('Pr\u00e9sent')\n        break\nelse:\n    print('Non pr\u00e9sent')\n\n# Encore plus pythonique avec une list-comprehension\n</code></pre>"},{"location":"memo-python/#boucle-while","title":"Boucle while","text":"<pre><code>x = 0\nwhile x &lt; 10:\n    print(x)\n    x += 1\n</code></pre> <ul> <li>En Python, il n'y a pas de boucle <code>do ... while</code>, \u00e0 la place, on peut faire ainsi :</li> </ul> <pre><code>executer_une_fonction()\nwhile not conditon_echec:\n    executer_une_fonction()\n</code></pre>"},{"location":"memo-python/#switch","title":"Switch","text":"<p>Python 3.10 minimum</p> <pre><code>numero_jour = 2\n\nmatch numero_jour:\n  case 1:\n    return 'Lundi'\n  case 2:\n    return 'Mardi'\n  case 3:\n    return 'Mercredi'\n  case 4:\n    return 'Jeudi'\n  case 5:\n    return 'Vendredi'\n  case 6:\n    return 'Samedi'\n  case 7:\n    return 'Dimanche'\n  case _:\n    return 'Pas un jour de la semaine'\n</code></pre>"},{"location":"memo-python/#list-comprehensions","title":"List Comprehensions","text":"<p>C'est une fa\u00e7on tr\u00e8s pythonique et tr\u00e8s utilis\u00e9e de cr\u00e9er des listes. Par exemple, cr\u00e9er une liste des nombres impairs entre 1 et 9 :</p> <pre><code># Non pythonique\nimpair = []\nfor x in range(10):\n    if x % 2:\n        impair.append(x)\n\n# Pythonique\nimpair = [x for x in range(10) if x % 2]\n</code></pre> <p>Autre exemple en transformant une liste :</p> <pre><code>countries = ['Allemagne', 'Espagne', 'France']\ncountries = [c.upper() for c in countries]\n</code></pre> <ul> <li>Il existe aussi les Dict Comprehensions (moins utilis\u00e9)</li> </ul>"},{"location":"memo-python/#manipulation-sur-les-chaines-de-caracteres","title":"Manipulation sur les cha\u00eenes de caract\u00e8res","text":"<ul> <li>Pour information, les cha\u00eenes de caract\u00e8res sont des listes et on peut faire du slicing sur des listes :</li> </ul> <pre><code>alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nlen(alphabet)\n','.join(alphabet)\nalphabet.lower()\nalphabet.upper()\nalphabet[1]  # B\nalphabet[1:3]  # BC\nalphabet[-1]  # Z\nalphabet[-3:]  # XYZ\nalphabet[:6]  # ABCDEF\n</code></pre> <p>Slicing sur les mois de l'ann\u00e9e :</p> <pre><code>mois = ['Janvier', 'F\u00e9vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Octobre', 'Novembre', 'D\u00e9cembre']\n\nmois[0:2]\n['Janvier', 'F\u00e9vrier']\n\nmois[2:]\n['Mars', 'Avril', 'Mai', 'Juin', 'Octobre', 'Novembre', 'D\u00e9cembre']\n\nmois[:-2]\n['Janvier', 'F\u00e9vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Octobre']\n\nmois[-2:]\n['Novembre', 'D\u00e9cembre']\n</code></pre>"},{"location":"memo-python/#fonctions","title":"Fonctions","text":"<p>Une fonction permet de factoriser son code. Elle peut :</p> <ul> <li>ne pas prendre de param\u00e8tre en entr\u00e9e</li> <li>prendre un ou plusieurs param\u00e8tres en entr\u00e9e</li> <li>ces entr\u00e9es peuvent avoir des valeurs par d\u00e9faut, on n'est donc pas oblig\u00e9 de les fournir de lors l'appel de la fonction</li> <li>une fonction peut ne rien retourner, (pas d'instructions <code>return</code> ou alors <code>return None</code>)</li> <li> <p>ou alors retourner une ou plusieurs valeurs (cela sera implicitement une liste)</p> </li> <li> <p>Voici des exemples de fonction Python. Encore une fois, attention \u00e0 l'indentation !</p> </li> </ul> <pre><code>def ajouter(x, y):\n    \"\"\"Ajouter deux nombres.\"\"\"\n    return x + y\n\ndef crier(phrase='bonjour'):\n    print(phrase.upper())\n\ndef discuter(texte, personnage='Charles'):\n    \"\"\"Un personnage discute.\"\"\"\n    print('{}: \"{}\"'.format(personnage, texte))\n\ndef discuter(texte, personnage='Charles'):\n    \"\"\"Un personnage discute.\"\"\"\n    return f'{personnage}: \"{texte}\"'\n</code></pre> <ul> <li>Une fonction peut retourner plusieurs valeurs :</li> </ul> <pre><code>def decomposer(entier, diviser_par):\n    \"\"\"Retourne la partie enti\u00e8re et le reste d'une division.\"\"\"\n    partie_entiere = entier / diviser_par\n    reste = entier % diviser_par\n    return int(partie_entiere), reste\n</code></pre> <ul> <li>Il se peut que l'on ne connaisse pas \u00e0 l'avance le nombre pr\u00e9cis d'arguments dans une fonction.<ul> <li><code>args</code> est utilis\u00e9 pour passer un nombre ind\u00e9termin\u00e9 d'argument \u00e0 la fonction</li> <li><code>kwargs</code> est utilis\u00e9 pour un nombre ind\u00e9termin\u00e9 d'arguments nomm\u00e9s</li> </ul> </li> </ul> <pre><code>def une_fonction(*args, **kwargs):\n    print('Les arguments')\n    for arg in args:\n        print(arg)\n    print('Les arguments non nomm\u00e9s')\n    for key, value in kwargs.items():\n        print('{} -&gt; {}'.format(key, value))\n\nune_fonction(1,2,3, text='Ma phrase')\n</code></pre>"},{"location":"memo-python/#poo-programmation-orientee-objet","title":"POO : Programmation Orient\u00e9e Objet","text":"<p>Pour l'explication th\u00e9orique, lire l'introduction dans le chapitre de la console.</p> <p>On peut introduire l'utilisation de la POO \u00e0 l'aide de l'objet <code>Path</code>. La documentation de cette classe se trouve en ligne.</p> <p>La librairie <code>Path</code> est install\u00e9 de base avec Python.</p> <p>La programmation orient\u00e9e objet permet de cr\u00e9er un objet (on parle plus pr\u00e9cis\u00e9ment d'instancier) puis on peut appeler des m\u00e9thodes sur cet objet.</p> <p>Imaginons que l'on cr\u00e9e un objet voiture</p> <p>Dans une console QGIS :</p> <pre><code>from pathlib import Path\n# Appel du \"constructeur\"\nchemin = Path('.')\n# La notation . est une cha\u00eene de caract\u00e8re particuli\u00e8re pour un OS demandant le dossier courant de l'ex\u00e9cution.\n# On peut utiliser .. pour faire r\u00e9f\u00e9rence au dossier parent\nprint(chemin.absolute())\nprint(chemin.is_dir())\nun_fichier = chemin / 'mon_projet.qgs'\nprint(un_fichier.exists())\nprint(un_fichier.name)\nprint(un_fichier.name)\nprint(chemin.joinpath('mon_projet.qgs').exists())\n</code></pre> <p>Tip</p> <p>Quand l'instruction se termine par des <code>()</code>, on dit que c'est une m\u00e9thode de cet objet. Il s'agit d'une fonction, qui peut prendre ou non des param\u00e8tres et qui peut renvoyer ou non des r\u00e9sultats en sortie.  Quand l'instruction ne se termine pas par <code>()</code>, on acc\u00e8de \u00e0 une propri\u00e9t\u00e9 de l'objet.</p> <p>Pour une application avec des objets QGIS, il faut lire le chapitre suivant sur la console ou encore la partie sur l'\u00e9criture d'un script Processing.</p>"},{"location":"memo-python/#exceptions","title":"Exceptions","text":"<p>Lire le chapitre sur le parcours des entit\u00e9s.</p>"},{"location":"memo-python/#truc-et-astuces","title":"Truc et astuces","text":""},{"location":"memo-python/#passage-par-reference","title":"Passage par r\u00e9f\u00e9rence","text":"<p>Warning</p> <p>Attention au passage par r\u00e9f\u00e9rence : <pre><code>ma_liste_1 = [1, 2, 3]\nma_liste_2 = ma_liste_1\nma_liste_2.append(4)\nprint(ma_liste_2)\nprint(ma_liste_1)\n</code></pre></p>"},{"location":"memo-python/#enumerate","title":"Enumerate","text":"<p>Avoir un compteur lors de l'it\u00e9ration d'une liste : <pre><code>users = ['Tom', 'James', 'John']\nfor i, user in enumerate(users):\n    print('{} -&gt; {}'.format(i + 1, user))\n</code></pre></p>"},{"location":"memo-python/#annotations","title":"Annotations","text":"<p>Dans la suite de la formation, il est possible de voir des annotations Python. Cela permet de sp\u00e9cifier le type des variables dans les param\u00e8tres des fonctions et/ou de d\u00e9finir le type de retour.</p> <pre><code>from typing import Tuple\ndef decomposer(entier: int, diviser_par: int) -&gt; Tuple[int, int]:\n    \"\"\"Retourne la partie enti\u00e8re et le reste d'une division.\"\"\"\n    partie_entiere = entier / diviser_par\n    reste = entier % diviser_par\n    return int(partie_entiere), reste\n</code></pre> <p>Il faut lire la documentation des annotations pour voir les diff\u00e9rentes possibilit\u00e9s.</p>"},{"location":"memo-python/#terminologie","title":"Terminologie","text":"<ul> <li>Package</li> <li>Module</li> <li>Classe</li> <li>Instance / Objet</li> <li>Variable</li> </ul>"},{"location":"migration-majeure/","title":"Migration majeure au sein de PyQGIS","text":"<p>Lire la page recensant les \"breaking changes\" de QGIS de toutes les versions.</p>"},{"location":"migration-majeure/#qgis-2-qgis-3","title":"QGIS 2 \u2192 QGIS 3","text":"<ul> <li>QGIS 2, c'\u00e9tait Python 2 et Qt 4</li> <li>QGIS 3, Python 3 et Qt 5</li> </ul> <p>Petit guide sur une migration vers QGIS 3.</p>"},{"location":"migration-majeure/#qt-5-qt-6","title":"Qt 5 \u2192 Qt 6","text":"<p>QGIS tente de passer de la version Qt 5 vers Qt 6, sans passer par la case QGIS 4.0.</p> <p>Le travail de migration a commenc\u00e9 depuis QGIS 3.34. Mais \u00e0 l'heure actuelle, fin 2024, il n'existe qu'un binaire de QGIS pour tester Qt 6.</p> <p>Contrairement au passage Qt 4 vers Qt 5, il est possible de rendre une extension compatible pour les deux versions \u00e0 l'aide d'un script que l'on peut trouver dans l'autre petit guide pour une migration vers Qt 6.</p> <p>Par exemple, l'extension Lizmap avec le commit qui ajoute la compatibilit\u00e9 Qt 6.</p>"},{"location":"postgis/","title":"PostGIS","text":""},{"location":"postgis/#psycopg","title":"Psycopg","text":"<p>En Python, il existe un package d\u00e9di\u00e9 \u00e0 PostgreSQL, il s'agit de Psycopg. Il s'agit d'un package totalement ind\u00e9pendant de QGIS.</p> <p>Exemple pour r\u00e9cup\u00e9rer les tables pr\u00e9sentes dans une base de donn\u00e9es \u00e0 l'aide de SQL</p> <pre><code>import psycopg\n\ninspect_schema = \"mon_schema\"\n\nconnection = psycopg.connect(\n    user=\"docker\", password=\"docker\", host=\"db\", port=\"5432\", database=\"gis\"\n)\ncursor = connection.cursor()\ncursor.execute(\n    f\"SELECT table_name FROM information_schema.tables WHERE table_schema = '{inspect_schema}'\"\n)\nrecords = cursor.fetchall()\nprint(records)\n</code></pre>"},{"location":"postgis/#pyqgis","title":"PyQGIS","text":"<p>Depuis QGIS 3.16, il existe de plus en plus de m\u00e9thodes dans la classe QgsAbstractDatabaseProviderConnection pour interagir avec une base de donn\u00e9es PostGIS.</p> <pre><code>from qgis.core import QgsProviderRegistry\n\nmetadata = QgsProviderRegistry.instance().providerMetadata('postgres')\nconnection = metadata.findConnection(\"nom de la connexion PG dans votre panneau\")\n\n# Faire une requ\u00eate SQL (ou plusieurs)\n# Besoin d'\u00e9chapper en utilisant \"\" si votre sch\u00e9ma ou table comporte des majuscules\nresults = connection.executeSql(\"SELECT * FROM \\\"schema\\\".\\\"table\\\";\")\nprint(results)\n\n# Cr\u00e9er un sch\u00e9ma\nconnection.createSchema(\"mon_nouveau_schema\")\n\n# Lister les tables\nprint(connection.tables(\"un_schema\"))\n\n# Afficher une table dans QGIS, cela retourne une cha\u00eene de caract\u00e8re\n# permettant de faire une source de donn\u00e9es pour une QgsVectorLayer\nprint(connection.tableUri(\"schema\", \"table\"))\n</code></pre> <p>Afficher une table sans g\u00e9om\u00e9trie :</p> <pre><code>layer = QgsVectorLayer(connection.tableUri(\"schema\", \"table\"), \"Ma table\", \"postgres\")\nlayer.loadDefaultStyle()  # Si un style par d\u00e9faut existe dans votre base PostgreSQL, avec la table layer_styles\nQgsProject.instance().addMapLayer(layer)\n</code></pre> <p>Afficher une table avec g\u00e9om\u00e9trie en partant de <code>QgsDataSourceUri</code> : <pre><code>uri = QgsDataSourceUri(connection.uri())\nuri.setSchema('schema')\nuri.setTable('table')\nuri.setKeyColumn('uid')\n\n# Avec une geom si besoin\nuri.setGeometryColumn('geom')\n\nlayer = QgsVectorLayer(uri.uri(), 'Ma table', 'postgres')\nQgsProject.instance().addMapLayer(layer)\n</code></pre></p> <p>Afficher le r\u00e9sultat d'un <code>SELECT</code> :</p> <pre><code># Notons l'usage des parenth\u00e8ses autour du SELECT\nuri = QgsDataSourceUri(connection.uri())\nuri.setTable('(SELECT * FROM schema.table)')\nuri.setKeyColumn('uid')\n\n# Avec une geom si besoin\nuri.setGeometryColumn('geom')\n\nlayer = QgsVectorLayer(uri.uri(), 'Requ\u00eate SELECT', 'postgres')\nQgsProject.instance().addMapLayer(layer)\n</code></pre> <p>Exemple d'extension</p> <p>Si besoin, l'extension PgMetadata utilise exclusivement l'API \"Base de donn\u00e9es PG\" de QGIS.</p>"},{"location":"python-qgis/","title":"Le python dans QGIS","text":"<p>QGIS permet d'utiliser du Python dans divers emplacement que nous allons voir ci-dessous. Python poss\u00e8de de tr\u00e8s nombreux packages/modules disponibles sur internet qui fournissent des fonctions d\u00e9j\u00e0 \u00e9crites.</p>"},{"location":"python-qgis/#console","title":"Console","text":"<p>La console est accessible par le menu <code>Extension</code> -&gt; <code>Console Python</code>. Elle permet l'\u00e9criture de commande simple, une par une.  On ne peut pas enregistrer les commandes dans un fichier.</p>"},{"location":"python-qgis/#script-python","title":"Script Python","text":"<p>L'\u00e9diteur de script Python est accessible depuis l'ic\u00f4ne d\u00e9di\u00e9e dans la console Python. Il permet un prototypage rapide d'un script. On peut y \u00e9crire du code plus complexe en faisant intervenir des librairies ou des classes.</p> <p></p>"},{"location":"python-qgis/#script-processing","title":"Script Processing","text":"<p>Le menu Traitement dans QGIS donne acc\u00e8s a plusieurs algorithmes d'analyse.  Ces algorithms proviennent soient de QGIS, GDAL ou encore de plugins. La bo\u00eete \u00e0 outils de traitements ainsi que le modeleur graphique utilisent le \"framework\" Processing propre \u00e0  QGIS. Ce framework permet de d\u00e9finir les entr\u00e9es et les sorties d'un algorithme. Les algorithms sont donc  normalis\u00e9s en suivant tous le m\u00eame mod\u00e8le. Processing impose la fa\u00e7on d'\u00e9crire les scripts.</p> <p>\u00c9crire un script compatible QGIS Processing permet l'int\u00e9gration dans ce menu, permet \u00e9galement  l'utilisation de ce-dernier dans un mod\u00e8le ou encore l'utilisation en mode traitement par lot. Le framework peut aussi g\u00e9n\u00e9rer automatiquement l'interface graphique de l'algorithme et le code est optimis\u00e9.</p> <p>Il existe un mod\u00e8le par d\u00e9faut que l'on peut utiliser pour d\u00e9marrer l'\u00e9criture d'un script Processing. Depuis la barre d'outils traitements, <code>Cr\u00e9er un nouveau script depuis un mod\u00e8le.</code> Ce mod\u00e8le utilise la syntaxe Programmation Orient\u00e9e Objet. Depuis QGIS 3.6, on peut \u00e9galement utiliser la syntaxe par d\u00e9corateur <code>@alg</code>.</p> <p>Voir la documentation https://docs.qgis.org/latest/fr/docs/user_manual/processing/scripts.html#the-alg-decorator</p> <p></p>"},{"location":"python-qgis/#un-modele-processing-en-python","title":"Un mod\u00e8le Processing en Python","text":"<p>Depuis QGIS 3.6, on peut d\u00e9sormais exporter un mod\u00e8le de traitement Processing en Python. Il faut faire un clic droit sur un mod\u00e8le dans la bo\u00eete \u00e0 outils puis choisir \"Exporter le mod\u00e8le comme un  algorithme Python\". On peut donc modifier ensuite ce fichier Python afin de rajouter de la logique suppl\u00e9mentaire.</p> <p></p>"},{"location":"python-qgis/#extension-plugin","title":"Extension (plugin)","text":"<ul> <li>Extension c\u00f4t\u00e9 bureautique et m\u00eame c\u00f4t\u00e9 QGIS Serveur.</li> <li>La plupart des plugins sont disponibles sur https://plugins.qgis.org pour le    t\u00e9l\u00e9chargement,  ou sinon ils peuvent \u00eatre install\u00e9s par un dossier ZIP.</li> <li>Afin de d\u00e9velopper une extension :<ul> <li>Utilisation du Plugin Builder</li> <li>ou squelette minimum : https://github.com/wonder-sk/qgis-minimal-plugin</li> </ul> </li> <li>Plugin Reloader permet de simplifier le d\u00e9veloppement en \u00e9vitant de recharger QGIS</li> <li>Documentation plugin QGIS Serveur : https://docs.qgis.org/latest/fr/docs/pyqgis_developer_cookbook/server.html</li> </ul>"},{"location":"python-qgis/#fournisseur-processing-dans-une-extension-processing-provider","title":"Fournisseur Processing dans une extension (Processing Provider)","text":"<p>Similaire au script Processing, une extension QGIS peut aussi avoir son propre fournisseur d'algorithme.</p> <p></p> <p>On peut remarquer les plugins <code>DataPlotly</code>, <code>QuickOSM</code> etc.</p> <p>Ajout de Processing \u00e0 un plugin QGIS :</p> <ul> <li>soit lors du plugin builder</li> <li>ou manuellement en suivant la documentation pour l'ajout \u00e0 un plugin existant :   https://docs.qgis.org/latest/fr/docs/pyqgis_developer_cookbook/processing.html </li> </ul> <p>Il se peut que certaines extensions ne soient que des fournisseurs Processing.</p>"},{"location":"python-qgis/#expressions","title":"Expressions","text":"<p>Les expressions sont souvent pr\u00e9sentes dans QGIS. On peut les utiliser dans nombreux endroits, pour faire des s\u00e9lections, des conditions, etc. On peut \u00e9galement les utiliser \u00e0 chaque fois que vous pouvez voir ce symbole : </p> <p>Un plugin, ou m\u00eame simplement un utilisateur, peut enregistrer ses propres expressions. Ci-dessous, le plugin <code>InaSAFE</code>: </p> <ul> <li>Utilisation de l'API Wikip\u00e9dia pour r\u00e9cup\u00e9rer la description d'un terme :</li> </ul> <p></p>"},{"location":"python-qgis/#macros","title":"Macros","text":"<p>Warning</p> <p>Pensez \u00e0 autoriser les macros dans les  Propri\u00e9t\u00e9s de QGIS \u27a1 G\u00e9n\u00e9ral \u27a1 Fichiers du projet \u27a1 Activer les macros</p> <p>Accessible depuis les propri\u00e9t\u00e9s du projet, dans l'onglet <code>Macros</code>. On peut lancer du code Python  automatiquement soit :</p> <ul> <li>\u00e0 l'ouverture du projet</li> <li>lors de l'enregistrement du projet</li> <li>ou lors de sa fermeture </li> </ul> <p></p>"},{"location":"python-qgis/#formulaire","title":"Formulaire","text":"<p>Warning</p> <p>Pensez \u00e0 autoriser les macros dans les  Propri\u00e9t\u00e9s de QGIS \u27a1 G\u00e9n\u00e9ral \u27a1 Fichiers du projet \u27a1 Activer les macros</p> <p>On peut personnaliser un formulaire par l'ajout de logique Python. Cependant, dans QGIS 3,  l'utilisation de Python n'est plus forc\u00e9ment n\u00e9cessaire, on peut d\u00e9sormais utiliser des expressions  (recommand\u00e9).</p> <p></p>"},{"location":"python-qgis/#actions","title":"Actions","text":"<p>Les actions sont des petits traitements que l'on peut lancer soit depuis la table attributaire ou depuis le canevas. Par exemple, on peut ouvrir un lien WEB ou un PDF en fonction d'un attribut d'une entit\u00e9. Il est possible  d'\u00e9crire les actions en Python.</p> <p>Pour la cr\u00e9ation :</p> <p></p> <p>Pour l'utilisation c\u00f4t\u00e9 utilisateur :</p> <p></p>"},{"location":"python-qgis/#applicationscript-independant","title":"Application/script ind\u00e9pendant","text":"<p>Sans lancer QGIS graphiquement, on peut utiliser la librairie QGIS dans nos scripts Python. On peut donc cr\u00e9er notre propre application graphique ou notre propre ex\u00e9cutable et ainsi utiliser les fonctions de QGIS. On peut donc faire un programme en ligne de commande qui effectue une certaine op\u00e9ration dans un r\u00e9pertoire donn\u00e9.</p> <p>Depuis QGIS 3.16, nous pouvons lancer un mod\u00e8le ou un script Processing depuis la ligne de commande depuis l'outil qgis_process.</p>"},{"location":"python-qgis/#le-fichier-startuppy","title":"Le fichier \"startup.py\"","text":"<p>Si l'on place un fichier nomm\u00e9 <code>startup.py</code> dans le dossier Python du profil de l'utilisateur, QGIS va le lancer automatiquement \u00e0 chaque ouverture de QGIS.</p>"},{"location":"script-processing/","title":"Processing","text":"<p>Processing est un framework pour faire des algorithmes dans QGIS.</p> <p>Toute la boite \u00e0 outils Traitement dans QGIS sont des bas\u00e9s sur \"Processing\".</p> <p>Note, depuis QGIS 3.6, il existe d\u00e9sormais une autre syntaxe pour  \u00e9crire script Processing \u00e0 l'aide des d\u00e9corateurs Python.</p>"},{"location":"script-processing/#notion-sur-la-poo-en-python","title":"Notion sur la POO en Python","text":"<p>Le framework Processing utilise le concept de la Programmation Orient\u00e9e Objet. Il existe un tutoriel sur le site d'OpenClassRooms sur le sujet.</p> <p>Mais depuis le d\u00e9but de la formation, nous l'utilisons sans trop le savoir. Les objets <code>Qgs*</code>, comme <code>QgsVectorLayer</code> utilisent le principe de la POO.</p> <p>On a pu cr\u00e9er des objets QgsVectorLayer en appelant son constructeur :</p> <pre><code>layer = QgsVectorLayer(\"C:/chemin/vers/un/fichier.gpkg|layername=communes\", \"communes\", \"ogr\")\n</code></pre> <p>et ensuite on a pu appeler des m\u00e9thodes sur cet objet, comme :</p> <pre><code>layer.setName(\"Communes\")\nlayer.name()  # Retourne \"Communes\"\n</code></pre> <p>Tip</p> <p>Vous pouvez relire le passage sur la POO en d\u00e9but de formation.</p>"},{"location":"script-processing/#exemple","title":"Exemple","text":"<p>Nous allons faire un \"tr\u00e8s\" petit exemple rapide. \u00c9crivons notre premier jeu vid\u00e9o en console ! \ud83c\udfae</p> <pre><code>from time import sleep\n\nMAX_ENERGIE = 20\n\n\nclass Personnage:\n\n    \"\"\" Classe repr\u00e9sentant un personnage du jeu vid\u00e9o. \"\"\"\n\n    def __init__(self, un_nom, energie=MAX_ENERGIE):\n        \"\"\" Constructeur. \"\"\"\n        self.nom = un_nom\n        self.energie = energie\n\n    def marcher(self):\n        \"\"\" Permet au personnage de marcher.\n\n        Cela d\u00e9pense de l'\u00e9nergie.\n        \"\"\"\n        cout = 5\n        if self.energie &gt;= cout:\n            print(f\"{self.nom} marche.\")\n            self.energie -= cout\n        else:\n            print(f\"{self.nom} ne peut pas marcher car il n'a pas assez d'\u00e9nergie.\")\n\n    def courir(self):\n        \"\"\" Permet au personnage de courir.\n\n        Cela d\u00e9pense de l'\u00e9nergie.\n        \"\"\"\n        cout = 10\n        if self.energie &gt;= cout:\n            print(f\"{self.nom} court.\")\n            self.energie -= cout\n        else:\n            print(f\"{self.nom} ne peut pas courir car il n\\'a pas assez d\\'\u00e9nergie.\")\n\n    def dormir(self):\n        \"\"\" Permet au personnage de dormir et restaurer le niveau maximum d'\u00e9nergie.\"\"\"\n        print(f\"{self.nom} dort et fait le plein d'\u00e9nergie.\")\n        for i in range(2):\n            print('...')\n            sleep(1)\n        self.energie = MAX_ENERGIE\n\n    def manger(self):\n        \"\"\" Permet au personnage de manger et d'augmenter de 10 points le niveau d'\u00e9nergie.\"\"\"\n        energie = 10\n        print(f\"{self.nom} mange et r\u00e9cup\u00e8re {energie} points d'\u00e9nergie.\")\n        if self.energie &lt;= MAX_ENERGIE - energie:\n            self.energie += energie\n        else:\n            self.energie = MAX_ENERGIE\n\n    def __str__(self):\n        return f\"Je suis {self.nom} et j'ai {self.energie} points d'\u00e9nergie\"\n</code></pre>"},{"location":"script-processing/#utilisation-de-notre-classe","title":"Utilisation de notre classe","text":"<p><code>dir</code> est une m\u00e9thode qui prend une variable en param\u00e8tre et qui indique les propri\u00e9t\u00e9s/m\u00e9thodes de notre variable. On peut aussi utiliser <code>help</code> qui est plus pr\u00e9sentable.</p> <pre><code>a = Personnage('Dark Vador')\ndir(a)\nhelp(a)\n</code></pre> <p>Que remarquons-nous ?</p> Solution <pre><code>a = Personnage('Dark Vador')\na.courir()\na.dormir()\na.manger()\nprint(a)\n</code></pre> <p>Afficher le nom du personnage (et juste son nom, pas la phrase de pr\u00e9sentation)</p>"},{"location":"script-processing/#ajouter-dautres-methodes","title":"Ajouter d'autres m\u00e9thodes","text":"<p>Ajoutons une m\u00e9thode <code>dialoguer</code> pour discuter avec un autre personnage.</p> <p>Tip</p> <pre><code>def dialoguer(self, autre_personnage):\n    \"\"\" Permet de dialoguer avec un autre personnage. \"\"\"\n    pass\n</code></pre> <ol> <li>\u00c9crire le code la fonction \u00e0 l'aide d'un <code>print</code> pour commencer disant que <code>X dialogue avec Y</code>.</li> <li>V\u00e9rifier le niveau d'\u00e9nergie, on ne peut pas parler si on est d\u00e9c\u00e9d\u00e9 !</li> <li>Garder son code \u00e0 gauche, on peut utiliser une instruction <code>return</code></li> </ol> <p>Nous pouvons d\u00e9sormais utiliser le constructeur afin de cr\u00e9er deux instances de notre classe.</p> <pre><code>b = Personnage('Luke')\nb.dialoguer(a)\n</code></pre> Solution pour la m\u00e9thode <code>dialoguer()</code> <pre><code>def dialoguer(self, autre_personnage):\n    if self.energie &lt;= 0:\n        print(f\"{self.nom} ne peut pas dialoguer car il n'a pas assez d'\u00e9nergie.\")\n        return\n\n    print(f\"{self.nom} dialogue avec {autre_personnage.nom} et ils \u00e9changent des informations secr\u00e8tes\")\n</code></pre> <p>Continuons notre classe pour la gestion de son inventaire. Admettons que notre personnage puisse ramasser des objets afin de les mettre dans son sac \u00e0 dos.</p> <ol> <li>Il va falloir ajouter une nouvelle propri\u00e9t\u00e9 \u00e0 notre classe de type <code>list</code> que l'on peut nommer <code>inventaire</code>. Par    d\u00e9faut, son inventaire sera vide.</li> <li>Ajoutons 3 m\u00e9thodes : <code>ramasser</code>, <code>deposer</code> et <code>utiliser</code>. Pour le moment, pour faciliter l'exercice, utilisons une    cha\u00eene de caract\u00e8re pour d\u00e9signer l'objet. Ces m\u00e9thodes vont interagir avec notre <code>inventaire</code> \u00e0 l'aide des m\u00e9thodes    <code>remove()</code>, <code>append()</code> que l'on trouve sur une liste.</li> <li>Pour les m\u00e9thodes <code>deposer</code> et <code>utiliser</code>, nous pouvons avoir \u00e0 cr\u00e9er une autre m\u00e9thode priv\u00e9e afin de v\u00e9rifier    l'existence de l'objet dans l'inventaire. Par convention, nous pr\u00e9fixons la m\u00e9thode par <code>_</code> comme <code>_est_dans_inventaire</code>    afin de signaler que c'est une m\u00e9thode dite priv\u00e9e. L'utilisation de cette m\u00e9thode priv\u00e9e est uniquement \u00e0 titre    p\u00e9dagogique, on peut vouloir exposer la m\u00e9thode <code>est_dans_inventaire</code>. Cette m\u00e9thode doit renvoyer un bool\u00e9en.</li> <li>Ajoutons des commentaires et/ou des docstrings, CF m\u00e9mo Python. On peut utiliser la m\u00e9thode <code>help</code>.</li> <li>Pensons aussi annotations Python</li> </ol> <p>Info</p> <p>Il est important de comprendre que la POO permet de construire une sorte de bo\u00eete opaque du point de vue de l'utilisateur de la classe. Un peu comme une voiture, elles ont toutes un capot et une p\u00e9dale d'acc\u00e9l\u00e9ration. L'appui sur l'acc\u00e9l\u00e9rateur d\u00e9clenche plusieurs m\u00e9canismes \u00e0 l'int\u00e9rieur de la voiture, mais du point de vue utilisateur, c'est plut\u00f4t simple.</p> <p>Il y a des corrections sur les derni\u00e8res m\u00e9thodes en bas de ce TP</p> <p>Tip</p> <p>On peut vite imaginer d'autres classes, comme <code>Arme</code>, car ramasser un bout de bois ou un sabre laser n'a pas le m\u00eame impact lors de son utilisation dans un combat. Le d\u00e9g\u00e2t qu'inflige une arme sur le niveau d'\u00e9nergie de l'autre personnage est une propri\u00e9t\u00e9 de l'arme en question et du niveau du personnage.</p>"},{"location":"script-processing/#documentation","title":"Documentation","text":"<p>Pour l'\u00e9criture d'un script Processing, tant en utilisant la POO ou la version avec les d\u00e9corateurs, il y a une page sur la  documentation.</p>"},{"location":"script-processing/#utiliser-processing-en-python-avec-un-algorithme-existant","title":"Utiliser Processing en Python avec un algorithme existant","text":"<ul> <li>Sur une couche en EPSG:2154, faire un buffer de 10 m\u00e8tres par exemple.</li> <li>Cliquer sur la petite horloge dans le panneau de Processing/Traitement en haut</li> <li>Cliquer sur le dernier traitement en haut, puis copier/coller la ligne de Python</li> </ul> <p>On peut appeler un traitement en ligne de commande Python :</p> <pre><code>processing.run(\n    \"native:buffer\", \n    {\n        'INPUT':'/chemin/vers/HYDROGRAPHIE/CANALISATION_EAU.shp',\n        'DISTANCE':10,\n        'SEGMENTS':5,\n        'END_CAP_STYLE':0,\n        'JOIN_STYLE':0,\n        'MITER_LIMIT':2,\n        'DISSOLVE':False,\n        'OUTPUT':'TEMPORARY_OUTPUT'\n    }\n)\n</code></pre> <p>Tip</p> <p>Pour obtenir l'identifiant de l'algorithme, laissez la souris sur le nom de l'algorithme pour avoir son info-bulle dans le panneau traitement.</p> <p>Lien vers la documentation : https://docs.qgis.org/latest/fr/docs/user_manual/processing/console.html</p> <p>Pour obtenir la description d'un algorithme : <pre><code>processing.algorithmHelp(\"native:buffer\")\n</code></pre></p> <p>Exercice, faire une 3 tampons sur la m\u00eame couche vecteur, distance 10, 20 et 30 m\u00e8tres, avec une fonction.</p> <pre><code>def tampon(distance):\n    result = processing.run(\n        \"native:buffer\", \n        {\n            'INPUT':'/chemin/vers/HYDROGRAPHIE/BARRAGE.shp',\n            'DISTANCE':distance,\n            'SEGMENTS':5,\n            'END_CAP_STYLE':0,\n            'JOIN_STYLE':0,\n            'MITER_LIMIT':2,\n            'DISSOLVE':False,\n            'OUTPUT':'TEMPORARY_OUTPUT'\n        }\n    )\n    QgsProject.instance().addMapLayer(result['OUTPUT'])\n\nfor x in [10, 20, 30]:\n    tampon(x)\n</code></pre> <p>Warning</p> <p>Attention si utilisation de <code>iface.activeLayer()</code> qui va \u00eatre modifi\u00e9 si utilisation de <code>QgsProject.instance().addMapLayer()</code>. Il peut \u00eatre n\u00e9cessaire d'extraire la s\u00e9lection de la couche hors de la boucle.</p>"},{"location":"script-processing/#lancer-linterface-graphique-de-notre-algorithme","title":"Lancer l'interface graphique de notre algorithme","text":"<p>Au lieu de <code>processing.run</code>, on peut cr\u00e9er uniquement le dialogue. Il faut alors l'afficher manuellement.</p> <pre><code>dialog = processing.createAlgorithmDialog(\n    \"native:buffer\",\n    {\n        'INPUT': '/data/lines.shp',\n        'DISTANCE': 100.0,\n        'SEGMENTS': 10,\n        'DISSOLVE': True,\n        'END_CAP_STYLE': 0,\n        'JOIN_STYLE': 0,\n        'MITER_LIMIT': 10,\n        'OUTPUT': '/data/buffers.shp'\n    }\n)\ndialog.show()\n</code></pre> <p>Ou alors directement lancer ex\u00e9cution du dialogue :</p> <pre><code>processing.execAlgorithmDialog(\n    \"native:buffer\",\n    {\n        'INPUT': '/data/lines.shp',\n        'DISTANCE': 100.0,\n        'SEGMENTS': 10,\n        'DISSOLVE': True,\n        'END_CAP_STYLE': 0,\n        'JOIN_STYLE': 0,\n        'MITER_LIMIT': 10,\n        'OUTPUT': '/data/buffers.shp'\n    }\n)\n</code></pre>"},{"location":"script-processing/#notre-propre-script-processing","title":"Notre propre script Processing","text":"<ul> <li>Nous souhaitons pouvoir cr\u00e9er plusieurs tables vides assez facilement \u00e0 l'aide des fichiers CSV.</li> <li>Nous avons un dossier avec plusieurs fichiers CSV repr\u00e9sentant chacun une table.</li> <li>Le nom du fichier CSV repr\u00e9sente le nom de la table.</li> <li>La premi\u00e8re ligne repr\u00e9sente l'ent\u00eate des colonnes.</li> <li>La deuxi\u00e8me ligne, si elle s'appelle <code>geom</code>, repr\u00e9sente le type de g\u00e9om\u00e9trie et sa projection.</li> </ul> <p>Exemple de fichier csv <code>canalisation.csv</code> : </p> name type length precision alias geom polygon 2154 id 2 3 0 ID n 10 10 0 Nom d 2 3 0 Diam\u00e8tre l 2 3 0 Longueur"},{"location":"script-processing/#preparation","title":"Pr\u00e9paration","text":"<ul> <li>Cr\u00e9er un dossier <code>processing_canalisation</code> \u00e0 c\u00f4t\u00e9 du projet avec des fichiers CSV \u00e0 l'int\u00e9rieur :</li> </ul> <p><code>canalisation.csv</code></p> <pre><code>name,type,length,precision,alias\ngeom,line,2154,'',''\nid,2,3,0,ID\nn,10,10,0,Nom\nd,2,3,0,Diam\u00e8tre\nl,2,3,0,Longueur\n</code></pre> <p><code>regard.csv</code> :</p> <pre><code>name,type,length,precision,alias\ngeom,point,2154,'',''\nid,2,3,0,ID\nn,10,10,0,Nom rue\n</code></pre>"},{"location":"script-processing/#creation-du-cur-de-notre-script","title":"Cr\u00e9ation du c\u0153ur de notre script","text":"<ul> <li>Commen\u00e7ons par \u00e9crire le script en console</li> <li>Il nous faut une fonction qui liste les CSV dans un dossier.</li> </ul> <pre><code>def liste_csv(folder):\n    \"\"\" Liste les CSV disponibles dans le dossier. \"\"\"\n    pass\n</code></pre> <p>Correction du script Python (et non la correction du script Processing) :</p> <pre><code>import os\nimport csv\n\ndef liste_csv(folder):\n    \"\"\" Fonction g\u00e9n\u00e9rique pour liste les CSV dans un dossier. \"\"\"\n    csvs = []\n    for root, directories, files in os.walk(folder):\n        for file in files:\n            if file.lower().endswith('.csv'):\n                csvs.append(os.path.join(root, file))\n    return csvs\n\ndef lire_csv(csv_file):\n    \"\"\" Fonction g\u00e9n\u00e9rique pour cr\u00e9er une couche vecteur selon la d\u00e9finition d'un CSV. \"\"\"\n    geom = 'None'\n    crs = None\n    fields = []\n\n    with open(csv_file) as csvfile:\n        reader = csv.reader(csvfile)\n        for i, row in enumerate(reader):\n            if i == 0:\n                # Header du CSV\n                continue\n            elif i == 1 and row[0] == 'geom':\n                geom = row[1]\n                crs = row[2]\n            else:\n                field = QgsField()\n                field.setName(row[0])\n                field.setType(int(row[1]))\n                field.setLength(int(row[2]))\n                field.setPrecision(int(row[3]))\n                field.setAlias(row[4])\n                fields.append(field)\n\n    name = os.path.splitext(os.path.basename(csv_file))[0]\n    if geom:\n        geom += '?crs=epsg:{}'.format(crs)\n    layer = QgsVectorLayer(geom, name, 'memory')\n    with edit(layer):\n        for field in fields:\n            layer.addAttribute(field)\n\n    return layer\n\n# Appel des fonctions\nfolder = os.path.join(QgsProject.instance().homePath(), 'processing_canalisation')\ncsv_files = liste_csv(folder)\nfor csv_file in csv_files:\n    layer = lire_csv(csv_file)\n    QgsProject.instance().addMapLayer(layer)\n</code></pre> <p>Nous avons le c\u0153ur de notre algorithme, qui fonctionne dans la console Python. Si l'utilisateur souhaite  changer de th\u00e9matique pour la g\u00e9n\u00e9ration des couches (ne pas utiliser <code>processing_canalisation</code> mais plut\u00f4t <code>processing_fibre_optique</code> ou <code>processing_plu</code>), il faut qu'il modifie \u00e0 la main la ligne de Python, ce n'est pas tr\u00e8s ergonomique.</p> <p>Nous allons d\u00e9sormais le transformer en Script Processing afin de rajouter une interface graphique.</p> <ul> <li>Partons de l'algorithme d'exemple :</li> <li>Panneau Traitement </li> <li><code>Python</code> en haut</li> <li><code>Cr\u00e9er un nouveau script depuis un mod\u00e8le</code></li> <li>Modifions les fonctions une par une : </li> <li><code>name()</code></li> <li><code>displayName()</code></li> <li>...</li> </ul> <p>Pour le <code>initAlgorithm()</code>, nous devons modifier le param\u00e8tre pour afficher un s\u00e9lecteur de dossier :</p> <pre><code>    def initAlgorithm(self, config=None):\n        self.addParameter(\n            QgsProcessingParameterFile(\n                self.INPUT,\n                self.tr('R\u00e9pertoire'),\n                QgsProcessingParameterFile.Folder,\n                optional=False\n            )\n        )\n\n        self.addOutput(\n            QgsProcessingOutputMultipleLayers(\n                self.OUTPUT_LAYERS,\n                self.tr('Couches de sorties')\n            )\n        )\n</code></pre> <p>Ajoutons les fonctions <code>liste_csv</code> et <code>lire_csv</code> mais :</p> <ul> <li>Ajoutons <code>self</code> comme premier param\u00e8tre dans la signature de la fonction : <code>def lire_csv(self, ...):</code></li> <li>Ajoutons <code>self</code> lors de l'appel \u00e0 la fonction : <code>self.liste_csv(...)</code></li> </ul> <p>Pour le <code>processAlgorithm</code>, nous allons incorporer le code que l'on a fait avant</p> <pre><code>    def processAlgorithm(self, parameters, context, feedback):\n        \"\"\"\n        Here is where the processing itself takes place.\n        \"\"\"\n        folder = self.parameterAsFile(parameters, self.INPUT, context)\n        csv_files = self.liste_csv(folder)\n\n        results = []\n        for csv_file in csv_files:\n            layer = self.lire_csv(csv_file)\n            results.append(layer.id())\n\n            context.temporaryLayerStore().addMapLayer(layer)\n            context.addLayerToLoadOnCompletion(\n                layer.id(),\n                QgsProcessingContext.LayerDetails(\n                    layer.name(),\n                    context.project(),\n                    self.OUTPUT\n                )\n            )\n\n        return {self.OUTPUT: results}\n</code></pre> <ul> <li>Il faut aussi ajouter les imports manquants.</li> </ul> <p>Solution finale :</p> <p><pre><code>\"\"\"\n***************************************************************************\n*                                                                         *\n*   This program is free software; you can redistribute it and/or modify  *\n*   it under the terms of the GNU General Public License as published by  *\n*   the Free Software Foundation; either version 2 of the License, or     *\n*   (at your option) any later version.                                   *\n*                                                                         *\n***************************************************************************\n\"\"\"\nimport os\nimport csv\n\nfrom qgis.PyQt.QtCore import QCoreApplication\nfrom qgis.core import (\n   edit,\n   QgsField,\n   QgsProcessingContext,\n   QgsProcessingAlgorithm,\n   QgsProcessingParameterFile,\n   QgsProcessingOutputMultipleLayers,\n   QgsVectorLayer,\n)\n\n\nclass ExampleProcessingAlgorithm(QgsProcessingAlgorithm):\n    \"\"\"\n    This is an example algorithm that takes a vector layer and\n    creates a new identical one.\n\n    It is meant to be used as an example of how to create your own\n    algorithms and explain methods and variables used to do it. An\n    algorithm like this will be available in all elements, and there\n    is not need for additional work.\n\n    All Processing algorithms should extend the QgsProcessingAlgorithm\n    class.\n    \"\"\"\n\n    # Constants used to refer to parameters and outputs. They will be\n    # used when calling the algorithm from another algorithm, or when\n    # calling from the QGIS console.\n\n    INPUT = 'INPUT'\n    OUTPUT = 'OUTPUT'\n\n    def tr(self, string):\n        \"\"\"\n        Returns a translatable string with the self.tr() function.\n        \"\"\"\n        return QCoreApplication.translate('Processing', string)\n\n    def createInstance(self):\n        return ExampleProcessingAlgorithm()\n\n    def name(self):\n        \"\"\"\n        Returns the algorithm name, used for identifying the algorithm. This\n        string should be fixed for the algorithm, and must not be localised.\n        The name should be unique within each provider. Names should contain\n        lowercase alphanumeric characters only and no spaces or other\n        formatting characters.\n        \"\"\"\n        return 'myscript'\n\n    def displayName(self):\n        \"\"\"\n        Returns the translated algorithm name, which should be used for any\n        user-visible display of the algorithm name.\n        \"\"\"\n        return self.tr('My Script')\n\n    def group(self):\n        \"\"\"\n        Returns the name of the group this algorithm belongs to. This string\n        should be localised.\n        \"\"\"\n        return self.tr('Example scripts')\n\n    def groupId(self):\n        \"\"\"\n        Returns the unique ID of the group this algorithm belongs to. This\n        string should be fixed for the algorithm, and must not be localised.\n        The group id should be unique within each provider. Group id should\n        contain lowercase alphanumeric characters only and no spaces or other\n        formatting characters.\n        \"\"\"\n        return 'examplescripts'\n\n    def shortHelpString(self):\n        \"\"\"\n        Returns a localised short helper string for the algorithm. This string\n        should provide a basic description about what the algorithm does and the\n        parameters and outputs associated with it.\n        \"\"\"\n        return self.tr(\"Example algorithm short description\")\n\n    def initAlgorithm(self, config=None):\n        \"\"\"\n        Here we define the inputs and output of the algorithm, along\n        with some other properties.\n        \"\"\"\n        self.addParameter(\n            QgsProcessingParameterFile(\n                self.INPUT,\n                self.tr('R\u00e9pertoire'),\n                QgsProcessingParameterFile.Folder,\n                optional=False\n            )\n        )\n\n        self.addOutput(\n            QgsProcessingOutputMultipleLayers(\n                self.OUTPUT,\n                self.tr('Couches de sorties')\n            )\n        )\n\n    def liste_csv(self, folder):\n        \"\"\" Fonction g\u00e9n\u00e9rique pour liste les CSV dans un dossier. \"\"\"\n        csvs = []\n        for root, directories, files in os.walk(folder):\n            for file in files:\n                if file.lower().endswith('.csv'):\n                    csvs.append(os.path.join(root, file))\n        return csvs\n\n    def lire_csv(self, csv_file):\n        \"\"\" Fonction g\u00e9n\u00e9rique pour cr\u00e9er une couche vecteur selon la d\u00e9finition d'un CSV. \"\"\"\n        geom = 'None'\n        crs = None\n        fields = []\n\n        with open(csv_file) as csvfile:\n            reader = csv.reader(csvfile)\n            for i, row in enumerate(reader):\n                if i == 0:\n                    # Header du CSV\n                    continue\n                elif i == 1 and row[0] == 'geom':\n                    geom = row[1]\n                    crs = row[2]\n                else:\n                    field = QgsField()\n                    field.setName(row[0])\n                    field.setType(int(row[1]))\n                    field.setLength(int(row[2]))\n                    field.setPrecision(int(row[3]))\n                    field.setAlias(row[4])\n                    fields.append(field)\n\n        name = os.path.splitext(os.path.basename(csv_file))[0]\n        if geom:\n            geom += '?crs=epsg:{}'.format(crs)\n        layer = QgsVectorLayer(geom, name, 'memory')\n        with edit(layer):\n            for field in fields:\n                layer.addAttribute(field)\n\n        return layer\n\n    def processAlgorithm(self, parameters, context, feedback):\n        \"\"\"\n        Here is where the processing itself takes place.\n        \"\"\"\n        folder = self.parameterAsFile(parameters, self.INPUT, context)\n        csv_files = self.liste_csv(folder)\n\n        results = []\n        for csv_file in csv_files:\n            layer = self.lire_csv(csv_file)\n            results.append(layer.id())\n\n            context.temporaryLayerStore().addMapLayer(layer)\n            context.addLayerToLoadOnCompletion(\n                layer.id(),\n                QgsProcessingContext.LayerDetails(\n                    layer.name(),\n                    context.project(),\n                    self.OUTPUT\n                )\n            )\n\n        return {self.OUTPUT: results}\n</code></pre> Nous avons d\u00e9sormais un nouvel algorithme dans la bo\u00eete \u00e0 outils pour g\u00e9n\u00e9rer un mod\u00e8le de donn\u00e9es suivant  une th\u00e9matique.</p>"},{"location":"script-processing/#introduction-aux-decorateurs","title":"Introduction aux d\u00e9corateurs","text":"<p>Comme mentionn\u00e9 au d\u00e9but de ce chapitre, il est possible de ne pas utiliser la POO pour \u00e9crire un Script Processing mais plut\u00f4t les d\u00e9corateurs. Reprenons l'exemple de la documentation.</p> <p>Le code suivant utilise le d\u00e9corateur @alg pour :</p> <ul> <li>utiliser une couche vectorielle comme entr\u00e9e</li> <li>compter le nombre d'entit\u00e9s</li> <li>faire une op\u00e9ration buffer</li> <li>cr\u00e9er une couche raster \u00e0 partir du r\u00e9sultat de l\u2019op\u00e9ration de tampon</li> <li>renvoyer la couche tampon, la couche raster et le nombre d\u2019entit\u00e9s</li> </ul> <p>Dans la documentation QGIS, on trouve la correspondance des d\u00e9corateurs avec la classe Processing.</p> <pre><code>from qgis import processing\nfrom qgis.processing import alg\n\n\n@alg(name='bufferrasteralg', label='Buffer and export to raster (alg)',\n     group='examplescripts', group_label='Example scripts')\n# 'INPUT' is the recommended name for the main input parameter\n@alg.input(type=alg.SOURCE, name='INPUT', label='Input vector layer')\n# 'OUTPUT' is the recommended name for the main output parameter\n@alg.input(type=alg.RASTER_LAYER_DEST, name='OUTPUT',\n           label='Raster output')\n@alg.input(type=alg.VECTOR_LAYER_DEST, name='BUFFER_OUTPUT',\n           label='Buffer output')\n@alg.input(type=alg.DISTANCE, name='BUFFERDIST', label='BUFFER DISTANCE',\n           default=1.0)\n@alg.input(type=alg.DISTANCE, name='CELLSIZE', label='RASTER CELL SIZE',\n           default=10.0)\n@alg.output(type=alg.NUMBER, name='NUMBEROFFEATURES',\n            label='Number of features processed')\ndef bufferrasteralg(instance, parameters, context, feedback, inputs):\n   \"\"\"\n   Description of the algorithm.\n   (If there is no comment here, you will get an error)\n   \"\"\"\n   input_featuresource = instance.parameterAsSource(parameters,\n                                                    'INPUT', context)\n   numfeatures = input_featuresource.featureCount()\n   bufferdist = instance.parameterAsDouble(parameters, 'BUFFERDIST',\n                                           context)\n   rastercellsize = instance.parameterAsDouble(parameters, 'CELLSIZE',\n                                               context)\n\n   if feedback.isCanceled():\n      return {}\n\n   params = {\n      'INPUT': parameters['INPUT'],\n      'OUTPUT': parameters['BUFFER_OUTPUT'],\n      'DISTANCE': bufferdist,\n      'SEGMENTS': 10,\n      'DISSOLVE': True,\n      'END_CAP_STYLE': 0,\n      'JOIN_STYLE': 0,\n      'MITER_LIMIT': 10\n   }\n   buffer_result = processing.run(\n      'native:buffer',\n      params,\n      is_child_algorithm=True,\n      context=context,\n      feedback=feedback)\n\n   if feedback.isCanceled():\n      return {}\n\n   params = {\n      'LAYER': buffer_result['OUTPUT'],\n      'EXTENT': buffer_result['OUTPUT'],\n      'MAP_UNITS_PER_PIXEL': rastercellsize,\n      'OUTPUT': parameters['OUTPUT']\n   }\n   rasterized_result = processing.run(\n      'qgis:rasterize',\n      params,\n      is_child_algorithm=True, context=context,\n      feedback=feedback)\n\n   if feedback.isCanceled():\n      return {}\n\n   results = {\n      'OUTPUT': rasterized_result['OUTPUT'],\n      'BUFFER_OUTPUT': buffer_result['OUTPUT'],\n      'NUMBEROFFEATURES': numfeatures,\n   }\n   return results\n</code></pre>"},{"location":"script-processing/#convertir-un-modele-processing-en-python","title":"Convertir un mod\u00e8le Processing en python","text":"<p>Il est possible de convertir un mod\u00e8le Processing en script Python. On peut alors le modifier avec plus de finesse.</p> <p>On ne peut pas reconvertir un script Python en mod\u00e8le.</p> <ul> <li>Depuis un mod\u00e8le, cliquer sur le bouton \"Convertir en script Processing\".</li> </ul>"},{"location":"script-processing/#utiliser-un-script-processing-dans-une-action","title":"Utiliser un script Processing dans une action","text":"<p>On peut utiliser <code>processing.run()</code> dans le code d'une action, pour faire une zone tampon sur un point en particulier par exemple.</p> <p>On peut lancer, graphiquement depuis la bo\u00eete \u00e0 outil Processing, une zone tampon, avec une s\u00e9lection. Regardons ensuite dans l'historique Processing pour voir comment QGIS a pu sp\u00e9cifier la s\u00e9lection dans son appel PyQGIS.</p> <p>On note l'usage d'une nouvelle classe <code>QgsProcessingFeatureSourceDefinition</code>.</p> <p>On souhaite donc pouvoir faire une zone tampon personnalis\u00e9e en cliquant sur un point \u00e0 l'aide d'une action.</p> <p>Il faut donc revoir le code dans le chapitre actions pour voir comment cr\u00e9er une action. Pour utiliser la s\u00e9lection, nous allons faire dans l'action :</p> <pre><code>layer = QgsProject.instance().mapLayer('[% @layer_id %]')\nlayer.selectByIds([int('[% $id %]')])\n# Ajouter ici le code processing.run avec une s\u00e9lection\nlayer.removeSelection()\n</code></pre> <p>On peut compl\u00e9ter l'action avec un <code>processing.run</code> en utilisant uniquement l'entit\u00e9 en s\u00e9lection.</p> Solution <pre><code>import processing\n\nlayer = QgsProject.instance().mapLayer('[% @layer_id %]')\nlayer.selectByIds([int('[% $id %]')])\n\nresult = processing.run(\n    \"native:buffer\",\n    {\n        'INPUT':QgsProcessingFeatureSourceDefinition(layer.source(), selectedFeaturesOnly=True),\n        'DISTANCE':1000,\n        'SEGMENTS':5,\n        'END_CAP_STYLE':0,\n        'JOIN_STYLE':0,\n        'MITER_LIMIT':2,\n        'DISSOLVE':False,\n        'OUTPUT':'TEMPORARY_OUTPUT'\n    }\n)\nQgsProject.instance().addMapLayer(result['OUTPUT'])\n\nlayer.removeSelection()\n</code></pre>"},{"location":"script-processing/#solution","title":"Solution","text":"<p>Sur la classe Personnage ci-dessus :</p> <pre><code>def _est_dans_inventaire(self, un_objet: str) -&gt; bool:\n    return un_objet in self.inventaire\n\ndef ramasser(self, un_objet):\n    print(f\"{self.nom} ramasse {un_objet} et le met dans son inventaire.\")\n    self.inventaire.append(un_objet)\n\ndef utiliser(self, un_objet):\n    if self._est_dans_inventaire(un_objet):\n        print(f\"{self.nom} utilise {un_objet}\")\n    else:\n        print(f\"{self.nom} ne poss\u00e8de pas {un_objet}\")\n\ndef deposer(self, un_objet):\n    if self._est_dans_inventaire(un_objet):\n        print(f\"{self.nom} d\u00e9pose {un_objet}\")\n        self.inventaire.remove(un_objet)\n\ndef donner(self, autre_personnage, un_objet):\n    if self._est_dans_inventaire(un_objet):\n        self.inventaire.remove(un_objet)\n        autre_personnage.inventaire.append(un_objet)\n        print(f\"{autre_personnage.nom} re\u00e7oit {un_objet} de la part de {self.nom} et le remercie \ud83d\udc4d\")\n</code></pre>"},{"location":"selection-parcours-entites/","title":"Fonctions sur une couche vecteur","text":""},{"location":"selection-parcours-entites/#boucler-sur-les-entites-dune-couche-sans-expression","title":"Boucler sur les entit\u00e9s d'une couche sans expression","text":"<p>On peut parcourir les entit\u00e9s d'une couche <code>QgsVectorLayer</code> \u00e0 l'aide de <code>getFeatures()</code> :</p> <pre><code>layer = iface.activeLayer()\nfor feature in layer.getFeatures():\n    print(feature)\n    print(feature['NOM'])\n</code></pre>"},{"location":"selection-parcours-entites/#utilisation-des-expressions-qgis","title":"Utilisation des expressions QGIS","text":"<ul> <li>Les expressions sont tr\u00e8s pr\u00e9sentes dans QGIS, tant dans l'interface graphique que dans l'utilisation en   Python.</li> <li>Nous partons de la couche des <code>COMMUNES</code> uniquement charg\u00e9 dans QGIS.</li> </ul>"},{"location":"selection-parcours-entites/#selection-dentite","title":"S\u00e9lection d'entit\u00e9","text":"<p>Nous souhaitons s\u00e9lectionner les entit\u00e9s dont le code INSEE commence par <code>77</code>. Commen\u00e7ons par faire cela graphiquement dans QGIS Desktop. \u00c0 l'aide d'une expression QGIS, s\u00e9lectionner les codes INSEE qui commencent par <code>77</code> (\u00e0 choisir un code INSEE propre au jeu de donn\u00e9es).</p> <p></p> <p>Solution en mode graphique :</p> <pre><code>\"CODE_INSEE\" LIKE '77%'\n</code></pre> <p>Nous allons faire la m\u00eame chose, mais en utilisant Python. Pensez \u00e0 d\u00e9s\u00e9lectionner les entit\u00e9s.</p> <pre><code>layer = iface.activeLayer()\nlayer.removeSelection()\nlayer.selectByExpression(\"\\\"CODE_INSEE\\\" LIKE '{}%'\".format(77))\nlayer.invertSelection()\nlayer.removeSelection()\n</code></pre> <p>Le raccourci <code>iface.activeLayer()</code> est tr\u00e8s pratique, mais de temps en temps on a besoin de plusieurs couches qui sont d\u00e9j\u00e0 dans la l\u00e9gende. Il existe dans <code>QgsProject</code> plusieurs m\u00e9thodes pour r\u00e9cup\u00e9rer des couches dans la l\u00e9gende :</p> <pre><code>projet = QgsProject.instance()\ncommunes = projet.mapLayersByName('communes')[0]\ninsee = projet.mapLayersByName('tableau INSEE')\n</code></pre> <p>Notons le s dans <code>mapLayersByName</code>. Il peut y avoir plusieurs couches avec ce m\u00eame nom de couche. La fonction retourne donc une liste de couches. Il convient alors de regarder si la liste est vide ou si elle contient plusieurs couches avec <code>len(communes)</code> par exemple.</p> <pre><code>if len(communes) == 0:\n    print(\"Pas de couches dans la l\u00e9gende qui se nomme 'communes'\")\n    layer = None\nelse len(communes) &gt;= 1:\n    # TODO FIX ME\n    layer = communes[0]\n</code></pre>"},{"location":"selection-parcours-entites/#exemple-dune-selection-avec-un-export","title":"Exemple d'une s\u00e9lection avec un export","text":"<p>On souhaite pouvoir exporter les communes par d\u00e9partement. On peut cr\u00e9er une variable <code>depts = ['34', '30']</code> puis boucler dessus pour exporter les entit\u00e9s s\u00e9lectionn\u00e9es dans un nouveau fichier.</p> <pre><code>from pathlib import Path\n\nlayer = iface.activeLayer()\n\noptions = QgsVectorFileWriter.SaveVectorOptions()\noptions.driverName = 'ESRI Shapefile'\noptions.fileEncoding = 'UTF-8'\noptions.onlySelectedFeatures = True  # Nouvelle option pour la s\u00e9lection\n\ndepts = ['34', '30']\nfor dept in depts:\n    print(f\"Dept {dept}\")\n    layer.selectByExpression(f\"\\\"INSEE_DEP\\\"  =  '{dept}'\")\n    result = QgsVectorFileWriter.writeAsVectorFormatV3(\n        layer,\n        str(Path(QgsProject.instance().homePath()).joinpath(f'{dept}.shp')),\n        QgsProject.instance().transformContext(),\n        options\n    )\n    print(result)\n    if result[0] == QgsVectorFileWriter.NoError:\n        print(\" \u2192 OK\")\n</code></pre> <p>Si l'on souhaite parcourir automatiquement les d\u00e9partements existants, on peut r\u00e9cup\u00e9rer les valeurs uniques. Pour cela, il faut modifier deux lignes :</p> <pre><code>index = layer.fields().indexFromName(\"INSEE_DEP\")\nfor dept in layer.uniqueValues(index):\n</code></pre>"},{"location":"selection-parcours-entites/#boucler-sur-les-entites-a-laide-dune-expression","title":"Boucler sur les entit\u00e9s \u00e0 l'aide d'une expression","text":"<p>L'objectif est d'afficher dans la console le nom des communes dont la population ne contient pas <code>NC</code>.</p> <p>Info</p> <p>Avec PyQGIS, on peut acc\u00e9der aux attributs d'une <code>QgsFeature</code> simplement avec l'op\u00e9rateur <code>[]</code> sur l'objet courant comme s'il s'agissait d'un dictionnaire Python :</p> <pre><code># Pour acc\u00e9der au champ \"NOM_COM\" de l'entit\u00e9 \"feature\" :\nprint(feature['NOM_COM'])\n</code></pre> <p>L'exemple \u00e0 ne pas faire, m\u00eame si cela fonctionne (car on peut l'optimiser tr\u00e8s facilement) :</p> <pre><code>layer = iface.activeLayer()\nfor feature in layer.getFeatures():\n    if feature['POPUL'] != 'NC':\n        print(feature['NOM_COM'])\n</code></pre> <p>Tip</p> <p>Ce qui prend du temps lors de l'ex\u00e9cution, c'est surtout le <code>print</code> en lui-m\u00eame. Si vous n'utilisez pas <code>print</code>, mais un autre traitement, cela sera plus rapide. Un simple print ralenti l'ex\u00e9cution d'un script.</p>"},{"location":"selection-parcours-entites/#optimisation-de-la-requete","title":"Optimisation de la requ\u00eate","text":"<p>Dans la documentation, observez bien la signature de la fonction <code>getFeatures</code>. Que remarquez-vous ? Utilisons donc une expression pour limiter les r\u00e9sultats.</p> <pre><code>request = QgsFeatureRequest(QgsExpression('\"POPUL\" != \\'NC\\''))\nfor feature in layer.getFeatures(request):\n    print('{commune} : {nombre} habitants pour'.format(commune=feature['NOM'], nombre=feature['POPUL']))\n</code></pre> <p>Nous pouvons accessoirement ordonner les r\u00e9sultats et surtout encore optimiser la requ\u00eate en :</p> <ul> <li>Ne demandant pas de charger la g\u00e9om\u00e9trie</li> <li>Ne demandant pas de charger tous les attributs</li> </ul> La solution pour les experts <pre><code>request = QgsFeatureRequest()\nrequest.setFilterExpression('\"POPUL\" != \\'NC\\'')\nrequest.addOrderBy('NOM')\nrequest.setFlags(QgsFeatureRequest.NoGeometry)\n# request.setSubsetOfAttributes([1, 4]) autre mani\u00e8re moins pratique\nrequest.setSubsetOfAttributes(['NOM', 'POPUL'], layer.fields())\nfor feature in layer.getFeatures(request):\n    print('{commune} : {nombre} habitants'.format(commune=feature['NOM'], nombre=feature['POPUL']))\n</code></pre> <ul> <li> <p>Faire le test en affichant un champ qui n'est pas dans la requ\u00eate.</p> </li> <li> <p>Rajoutons une intersection spatiale avec l'emprise suivante :</p> </li> </ul> <pre><code>request.setFilterRect(QgsRectangle(662737, 6807733, 717144, 6853979))\n</code></pre> <p>Si l'on souhaite \"enregistrer\" le r\u00e9sultat de cette expression QGIS, on peut la mat\u00e9rialiser dans une nouvelle couche :</p> <pre><code>memory_layer = layer.materialize(request)\nQgsProject.instance().addMapLayer(memory_layer)\n</code></pre> <p>Warning</p> <p>Attention \u00e0 la ligne iface.activeLayer() qui peut changer lors de l'ajout d'une nouvelle couche dans la l\u00e9gende.</p> <p>Regardons le r\u00e9sultat et corrigeons ce probl\u00e8me d'export afin d'obtenir les g\u00e9om\u00e9tries et les attributs, il faut supprimer la ligne <code>NoGeometry</code> si vous l'avez.</p>"},{"location":"selection-parcours-entites/#valeur-null","title":"Valeur NULL","text":"<p>En PyQGIS, il existe la valeur <code>NULL</code> qui peut-\u00eatre pr\u00e9sente dans la table attributaire d'une couche vecteur.</p> <pre><code>from qgis.PyQt.QtCore import NULL\n\nif feature['nom_attribut'] == NULL:\n    # Traiter la valeur NULL\n    pass\nelse:\n    # Continuer\n    pass\n</code></pre>"},{"location":"selection-parcours-entites/#calculer-un-champ","title":"Calculer un champ","text":"<p>Avant-dernier exercice, afficher une liste des communes en incluant la densit\u00e9 de population.</p> <p>Mais regardons avant la gestion des erreurs lors d'un traitement. En effet, nous allons vouloir \"caster\" (transformer le type) de la variable <code>population</code> en entier, mais attention, il y a des valeurs <code>NC</code> dans les valeurs.</p>"},{"location":"selection-parcours-entites/#les-exceptions-en-python","title":"Les exceptions en Python","text":"<p>Avant de traiter cet exercice, nous devons voir ce qu'est une exception en Python.</p> <p>\u00c0 plusieurs reprises depuis le d\u00e9but de la formation, il est fort \u00e0 parier que nous ayons des messages en rouges dans la console de temps en temps. Ce sont des exceptions. C'est une notion de programmation qui existe dans beaucoup de languages.</p> <p>Dans le langage informatique, une exception peut-\u00eatre :</p> <ul> <li>lev\u00e9e (\"raise\" en anglais) pour d\u00e9clencher une erreur</li> <li>attrap\u00e9e (\"catch\" en anglais, ou plut\u00f4t \"except\" en Python) pour traiter l'erreur</li> </ul> <p>Essayons dans la console de faire une l'op\u00e9ration 10 / 2 :</p> <pre><code>10 / 2\n</code></pre> <p>Essayons cette fois-ci 10 / 0, ce qui est math\u00e9matiquement impossible : <pre><code>10 / 0\n</code></pre></p> <p>On peut \"attraper\" cette erreur Python \u00e0 l'aide d'un <code>try ... except...</code> :</p> <pre><code>try:\n    10 / 2\nexcept ZeroDivisionError:\n    print('Ceci est une division par z\u00e9ro !')\n</code></pre> <p>Le <code>try</code> permet d'essayer le code qui suit. Le <code>except</code> permet d'attraper en filtrant s'il y a des exceptions et de traiter l'erreur si besoin.</p> <p>Toutes les exceptions h\u00e9ritent de <code>Exception</code> donc le code ci-dessous fonctionne, mais n'est pas recommand\u00e9 car il masque d'autres erreurs :</p> <pre><code>try:\n    10 / 2\nexcept Exception:\n    print('Erreur inconnue')\n</code></pre> <pre><code>try:\n    10 / 0\nexcept ZeroDivisionError:\n    print('Erreur, division par 0')\nexcept Exception:\n    print('Erreur inconnue')\n</code></pre> <p>Il existe d'autres mots-cl\u00e9s en Python pour les exceptions comme <code>finally:</code> et <code>else:</code>.</p> <p>On peut imaginer faire une fonction qui divise deux nombres et affiche le r\u00e9sultat  dans la <code>QgsMessageBar</code> de QGIS, sans tenir compte de la division par z\u00e9ro :</p> <pre><code>def diviser(a, b):\n    result = a / b\n    iface.messageBar().pushMessage('R\u00e9sulat', f'{a} / {b} = {result}', Qgis.Success)\n\ndiviser(10, 0)\n</code></pre> <p>En tenant compte d'une possible erreur lors de l'op\u00e9ration math\u00e9matique :</p> <pre><code>def diviser(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        iface.messageBar().pushMessage('Division par 0', f'{a} / {b} est impossible', Qgis.Warning)\n    else:\n        iface.messageBar().pushMessage('R\u00e9sulat', f'{a} / {b} = {result}', Qgis.Success)\n\ndiviser(10, 2)\n</code></pre> <p>\u00c9videment, on peut v\u00e9rifier la valeur de <code>b</code> en amont si c'est \u00e9gal \u00e0 0. Mais ceci est pour pr\u00e9senter le concept des exceptions en Python.</p>"},{"location":"selection-parcours-entites/#retour-a-lexercice","title":"Retour \u00e0 l'exercice","text":"<p>On souhaite donc savoir si un nombre est transformable en entier, dans le cas de la population (s'il y a <code>NC</code> par exemple) :</p> <pre><code>int('10')\nint('NC')\n</code></pre> <p>Correction possible de l'exercice :</p> <pre><code>layer = iface.activeLayer()\nrequest = QgsFeatureRequest()\n# request.setFilterExpression('to_int( \"POPUL\" ) &lt; 1000')\nrequest.addOrderBy('NOM')\nrequest.setSubsetOfAttributes(['NOM', 'POPUL'], layer.fields())\nfor feature in layer.getFeatures(request):\n    area = feature.geometry().area() / 1000000\n    try:\n        population = int(feature['POPUL'])\n    except ValueError:\n        population = 0\n    print('{commune} : {densite} habitants/km\u00b2'.format(commune=feature['NOM'], densite=population/area))\n</code></pre> <p>Nous souhaitons enregistrer ces informations dans une vraie table avec un nouveau champ <code>densite_population</code>.</p> <p>Solution plus simple :</p> <pre><code>layer = iface.activeLayer()\n\nif 'densite' not in layer.fields().names():\n    with edit(layer):\n        field = QgsField('densite', QVariant.Double, prec=2, len=2)\n        layer.addAttribute(field)\n\nindex = layer.fields().indexFromName('densite')\nlayer.startEditing()\nrequest = QgsFeatureRequest()\n# request.setFilterExpression('to_int( \"POPUL\" ) &gt; 10000')\nrequest.addOrderBy('NOM_COM')\nrequest.setSubsetOfAttributes(['NOM_COM', 'POPUL'], layer.fields())\nfor feature in layer.getFeatures(request):\n    area = feature.geometry().area() / 1000000\n    try:\n        population = int(feature['POPUL'])\n    except ValueError:\n        population = 0\n\n    densite = population/area\n    layer.changeAttributeValue(feature.id(), index, densite)\n    feature['densite'] = densite\n    # print('{commune} : {densite} habitants/km\u00b2'.format(commune=feature['NOM_COM'], densite=round(population/area,2)))\n\nlayer.commitChanges()\n</code></pre> <p>Solution un peu plus complexe :</p> <pre><code>layer = iface.activeLayer()\n\nrequest = QgsFeatureRequest()\nrequest.setFilterExpression('to_int( \"POPUL\" ) &lt; 1000')\npetites_communes = layer.materialize(request)\n\nwith edit(petites_communes):\n    field = QgsField('densite_population', QVariant.Double)\n    petites_communes.addAttribute(field)\n\n# On utilise les indes des champs automatiquement en r\u00e9cup\u00e9rant ces valeurs.\nindex_population = petites_communes.fields().indexFromName('POPUL')\nindex_densite = petites_communes.fields().indexFromName('densite_population')\n\nrequest = QgsFeatureRequest()\nrequest.setSubsetOfAttributes([index_population])\n\nwith edit(petites_communes):\n    for feature in petites_communes.getFeatures(request):\n        area = feature.geometry().area() / 1000000\n        population = int(feature['POPUL'])\n        densite=population/area\n        petites_communes.changeAttributeValue(feature.id(), index_densite, densite)\n\nQgsProject.instance().addMapLayer(petites_communes)\n</code></pre> <p>Manipulons d\u00e9sormais la g\u00e9om\u00e9trie en ajoutant le centro\u00efde de la commune dans une colonne <code>latitude</code> et <code>longitude</code> en degr\u00e9es.</p> <pre><code>layer = iface.activeLayer()\n\nrequest = QgsFeatureRequest()\nrequest.setFilterExpression('to_int( \"POPUL\" ) &lt; 1000')\npetites_communes = layer.materialize(request)\n\nwith edit(petites_communes):\n    petites_communes.addAttribute(QgsField('densite_population', QVariant.Double))\n\n    # /!\\ Ajouter les 2 lignes ci-dessous\n    petites_communes.addAttribute(QgsField('longitude', QVariant.Double))\n    petites_communes.addAttribute(QgsField('latitude', QVariant.Double))\n\nrequest = QgsFeatureRequest()\nrequest.setSubsetOfAttributes([4])\n\n# /!\\ Ajouter les 2 lignes ci-dessous \u00e0 propos de la transformation\ntransform = QgsCoordinateTransform(\n    QgsCoordinateReferenceSystem(\"EPSG:2154\"), QgsCoordinateReferenceSystem(\"EPSG:4326\"), QgsProject.instance())\n\nwith edit(petites_communes):\n    for feature in petites_communes.getFeatures(request):\n        area = feature.geometry().area() / 1000000\n        population = int(feature['POPUL'])\n        densite=population/area\n        petites_communes.changeAttributeValue(feature.id(), 5, densite)\n\n        # /!\\ Ajouter les lignes ci-dessous\n        geom = feature.geometry()\n        # La transformation affecte directement l'objet Python en cours, mais pas l'entit\u00e9 dans la couche\n        geom.transform(transform)\n        centroid = geom.centroid().asPoint()\n        petites_communes.changeAttributeValue(feature.id(), 6, centroid.x())\n        petites_communes.changeAttributeValue(feature.id(), 7, centroid.y())\n\nQgsProject.instance().addMapLayer(petites_communes)\n</code></pre>"},{"location":"standalone/","title":"Librairie QGIS","text":""},{"location":"standalone/#qgis-process","title":"QGIS Process","text":"<p>Depuis QGIS 3.16, il existe un outil qgis_process qui permet de lancer QGIS Processing en ligne de commande.</p> <p>Quelques rappels pour utiliser la ligne de commande sous Windows :</p> <ul> <li><code>cd</code> pour Change D*irectory. Par exemple <code>cd C:/Program Files/QGIS 3.34/bin/</code></li> <li><code>dir</code> pour lister les fichiers/dossiers d'un r\u00e9pertoire</li> </ul> <p>Dans le shell OSGEO, taper :</p> <pre><code>cd C:/Program Files/QGIS 3.14/bin/\n# Il peut s'agit du chemin ci-dessous\ncd C:\\OSGeo4W\\apps\\qgis-ltr\\bin\\\n</code></pre> <p>On doit avoir d\u00e9sormais un ex\u00e9cutable <code>qgis_process-qgis-ltr.bat</code></p> <pre><code>qgis_process-qgis-ltr.bat\nqgis_process-qgis-ltr.bat --help\nqgis_process-qgis-ltr.bat list\n</code></pre> <p>On peut lancer les algorithmes, les mod\u00e8les, les scripts Python qui sont dans la version graphique de QGIS Processing.</p> <p>On peut donc lancer en ligne de commande, ou alors avec notre propre ic\u00f4ne sur son bureau un ex\u00e9cutable.</p> <pre><code>qgis_process help qgis:buffer\nqgis_process run qgis:buffer -- INPUT=/home/etienne/source.shp DISTANCE=2 OUTPUT=/tmp/sortie.gpkg\n</code></pre> <p>L'id\u00e9e de QGIS Process est soit de faire un petit ex\u00e9cutable ou alors de lancer le programme \u00e0 intervalle de temps r\u00e9gulier.</p> <p></p>"},{"location":"standalone/#standalone-application","title":"Standalone application","text":"<p>Il est possible de faire un programme qui ne se lance pas dans QGIS Bureautique mais qui utilise la librairie QGIS qui se trouve sur l'ordinateur.</p> <p>Warning</p> <p>Gr\u00e2ce \u00e0 <code>qgis_process</code>, c'est exemple d'application standalone perd la plupart de son int\u00e9r\u00eat. Pour lancer QGIS en ligne de commande pour faire des traitements, il est d\u00e9sormais fortement conseill\u00e9 d'utiliser <code>qgis_process</code>.</p> <p>On peut donc cr\u00e9er son propre programme, en ligne de commande ou avec une interface graphique qui utilise le moteur de QGIS en arri\u00e8re-plan pour utiliser ce que sait d\u00e9j\u00e0 faire QGIS.</p> <p>Exemple sur le gist de Thomas Gratier</p> <pre><code># Code borrowed from https://subscription.packtpub.com/book/application_development/9781783984985/1/ch01lvl1sec18/creating-a-standalone-application\n# and upgraded for QGIS 3.0\nimport os\nimport sys\nimport shutil\nimport tempfile\nimport urllib.request\nfrom zipfile import ZipFile\nfrom glob import glob\n\nfrom qgis.core import (QgsApplication, QgsCoordinateReferenceSystem, QgsFeature,\n                   QgsGeometry, QgsProject, QgsRasterLayer, QgsVectorLayer)\nfrom qgis.gui import QgsLayerTreeMapCanvasBridge, QgsMapCanvas\nfrom qgis.PyQt.QtCore import Qt\n# Unused so commented\n# from qgis.PyQt.QtGui import *\n\napp = QgsApplication([], True)\n# On Windows : https://gis.stackexchange.com/questions/334172/creating-standalone-application-in-qgis\n# On Linux, didn't need to set it so commented\n# app.setPrefixPath(\"C:/Program Files/QGIS Brighton/apps/qgis\", True)\napp.initQgis()\ncanvas = QgsMapCanvas()\ncanvas.setWindowTitle(\"PyQGIS Standalone Application Example\")\ncanvas.setCanvasColor(Qt.white)\ncrs = QgsCoordinateReferenceSystem('EPSG:3857')\nproject = QgsProject.instance()\ncanvas.setDestinationCrs(crs)\n\nurlWithParams = 'type=xyz&amp;url=https://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&amp;zmax=19&amp;zmin=0&amp;crs=EPSG3857'\nrlayer2 = QgsRasterLayer(urlWithParams, 'OpenStreetMap', 'wms')\n\nif rlayer2.isValid():\n    project.addMapLayer(rlayer2)\nelse:\n    print('invalid layer')\n\n# Download shp ne_10m_admin_0_countries.shp and associated files in the same directory\nurl = \"https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_0_countries.zip\"\nif not glob(\"ne_10m_admin_0_countries.*\"):\n    with urllib.request.urlopen(url) as response:\n        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n            shutil.copyfileobj(response, tmp_file)\n        with ZipFile(tmp_file.name, 'r') as zipObj:\n            # Extract all the contents of zip file in current directory\n            zipObj.extractall()\n\nlayer_shp = QgsVectorLayer(os.path.join(os.path.dirname(__file__), \"ne_10m_admin_0_countries.shp\"), \"Natural Earth\", \"ogr\")\nif not layer_shp.isValid():\n  print(\"Layer failed to load!\")\n\nproject.addMapLayer(layer_shp)\n\nprint(layer_shp.crs().authid())\nprint(rlayer2.crs().authid())\ncanvas.setExtent(layer_shp.extent())\ncanvas.setLayers([rlayer2, layer_shp])\ncanvas.zoomToFullExtent()\n# canvas.freeze(True)\ncanvas.show()\ncanvas.refresh()\n# canvas.freeze(False)\ncanvas.repaint()\nbridge = QgsLayerTreeMapCanvasBridge(\n    project.layerTreeRoot(),\n    canvas\n)\n\ndef run_when_project_saved():\n    print('Saved')\n\nproject.projectSaved.connect(run_when_project_saved)\n\nproject.write('my_new_qgis_project.qgz')\n\ndef run_when_application_state_changed(state):\n    print('State changed', state)\n\napp.applicationStateChanged.connect(run_when_application_state_changed)\n\nexitcode = app.exec()\nQgsApplication.exitQgis()\nsys.exit(True)\n</code></pre>"}]}